{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gap : NLP/CV Data Engineering Framework, v0.9.3 (Pre-launch: alpha) Natural Language Processing for PDF, TIFF, and Camera Captured Documents, and Computer Vision Processing for Images Framework The Gap NLP/CV data engineering framework provides an easy to get started into the world of machine learning for your unstructured data in PDF documents, scanned documents, TIFF facsimiles and camera captured documents, and your image data in image files and image repositories. NLP Automatic OCR of scanned PDF and camera captured images. Automatic Text Extraction from documents. Automatic Syntax Analysis. Optional Romanization of Latin-1 diacritic characters. Optional Spell Correction. Programmatic control for data extraction or redaction (de-identification). Names, Addresses, Proper Places Social Security Numbers, Data of Birth, Gender, Age Telephone Numbers Numerical Information (e.g., medical, financial, \u2026) and units of measurement. Unit conversion from US Standard to Metric, and vice-versa Unicode character recognition Machine Training of Document and Page Classification. Asynchronous processing of documents. Automatic generation of NLP machine learning ready data. The framework consists of a sequence of Python modules which can be retrofitted into a variety of configurations. The framework is designed to fit seamlessly and scale with an accompanying infrastructure. To achieve this, the design incorporates: Problem and Modular Decomposition utilizing Object Oriented Programming Principles. Isolation of Operations and Parallel Execution utilizing Functional Programming Principles. High Performance utilizing Performance Optimized Python Structures and Libraries. High Reliability and Accuracy using Test Driven Development Methodology. Audience This framework is ideal for any organization planning to do: Data extraction from their repository of documents into an RDBMS system for CART analysis, linear/logistic regressions, or generating word vectors for natural language deep learning (DeepNLP). Generating machine learning ready datan from their repository of images for computer vision. License The source code is made available under the Apache 2.0 license: Apache 2.0 Prerequites The Gap framework extensively uses a number of open source applications/modules. The following applications and modules will be downloaded and installed on your computer/laptop, when the package is installed. Artifex's Ghostscript - extracting text from text PDF ImageMagic's Magick - extracting image from scanned PDF Google's Tesseract - OCR of scanned/image captured text NLTK (Natural Language Toolkit) - stemming/lemmatizer/parts of speech annotation unidecode - romanization of latin character codes numpy - high performance in-memory arrays (tensors) HDF5 - high performance of on-disk data (tensors) access openCV - image manipulation and processing for computer vision imutils - image manipulation for computer vision pyaspeller - spelling dictionary for text Pip Installation: The Gap framework is supported on Windows, MacOS, and Linux. It has been packaged for distribution via PyPi on launch. install miniconda (optional) Create an environment with: conda create -n gap python==3.7 jupyter Activate: source activate gap Deactivate: source deactivate install GapML: pip install gapml Dependecies if you are on Linux or Mac : + Tesseract: conda install -c conda-forge tesseract + Ghostscript: conda install -c conda-forge ghostscript + Imagemagick: conda install -c conda-forge imagemagick for Windows get the executables in the following links: + Ghostscript: https://www.ghostscript.com/download/gsdnld.html + Imagemagick: https://www.imagemagick.org/script/download.php + Tesseract: https://github.com/UB-Mannheim/tesseract/wiki Setup.py Installation: To install GapML via setup.py: clone from the Github repo. git clone https://github.com/gapml/NLP.git install the GapML setup file. python setup.py install Modules The framework provides the following pipeline of modules to support your data and knowledge extraction from both digital and scanned PDF documents, TIFF facsimiles and image captured documents. SPLITTER The splitter module is the NLP entry point into the pipeline. It consists of a Document and Page class. The Document class handles the splitting of PDF documents into PDF pages, TIFF facsimiles into TIFF pages, OCR and raw text extraction. PDF splitting and image extraction is handled by the open source Artifex\u2019s Ghostscript \u00a9, and TIFF splitting by open source Image Magic\u2019s Magick \u00a9. OCR is handled by the open source Google\u2019s Tesseract \u00a9. The Document object stores the individual PDF/TIFF/image pages and corresponding raw text and optionally page images (when scanned PDF, TIFF or images) in the specified storage path. The splitting process can be done synchronously or asynchronously, where in the latter case an event handler signals when the splitting/OCR has been completed and the page table is accessible. For OCR, the resolution of the image extraction is settable, which will affect the quality of the OCR, and corresponding processing time. If the resolution of the original scanned page is lower than the setting, it will be up-sampled, and conversely if it is higher it will be down-sampled. The Page class handles access to the individual pages, via the page table of the document class. Access is provided to the individual PDF, TIFF or image page, the scanned image (when scanned PDF, TIFF or images), raw text and the Natural Language Processing (NLP) processed tokens (when SYNTAX module is installed). NLP processing of the raw text is deferred until first access (JIT), and then preserved in memory as long as the corresponding page object is referenced. The NLP processed tokens may be further segmented into regions, consisting of tables, paragraphs, columns, etc. when the SEGMENTATION module is installed. The document and corresponding pages may be classified (i.e., category of the content) when the CLASSIFICATION module is installed. SYNTAX The syntax module follows the splitter module in the pipeline. It consists of the Words and Vocabulary classes. The Words class handles natural language processing (NLP) of the extracted text. The NLP processing can be configured for tokenization, stemming, lemmatizing, stop word removal, syntax analysis and word classification, with Unicode support. The word classifier recognizes: Syntax Units: Articles, Demonstratives, Prepositions, Pronouns, Conjunctions, Quantifiers, Questions Abbreviations Acronyms Gender (inclusive of Transgender) Date of Birth USA and Canadian Addresses USA and Canadian Telephone Numbers USA Social Security numbers USA and ISO Standard for Dates USA and ISO Standard for Numbers and units of measure. Geographic Locations Sentiment Dates, numbers and units of measure can be converted to either USA Standard or ISO Standard. USA and Canadian postal addresses are converted to the USPO standard for address matching. Along with the builtin stemmer and lemmatizer, the module can optionally be configured to use the NLTK (open source) stemmers, lemmatizer and parts of speech annotations. SEGMENTATION The segmentation module was introduced as part of the pre-launch of Gap v0.9. It currently is in the demonstration stage, and not ready for commericial-product code ready. The segmentation module examines the whitespace layout of the text to identify 'human' layout of text and corresponding context, such as paragraphs, headings, columns, page numbering, letterhead, etc. The text is then separated into segments based on recognized layout and within the segments the text is NLP preprocessed. In this mode, the NLP preprocessed text is hierarchical. At the top level are the segments, with corresponding segment tag, and the child is the NLP preprocessed text within the segment. User's Guide The User's (Programming) Quick Start Guide can be found here Releases -- describe here Testing The GAP framework is developed using Test Driven Development methodology. The automated unit tests for the framework use pytest, which is a xUnit style form of testing (e.g., jUnit, nUnit, jsUnit, etc). Installation and Documentation The pytest application can be installed using pip: pip install pytest Online documentation for pytest Execution The following are the pre-built automated unit tests, which are located under the subdirectory tests: document_test.py # Tests the Document Class in the Splitter Module page_test.py # Tests the Page Class in the Splitter Module words_test.py # Tests the Words and Addresses Class in the Syntax Module segment_test.py # Tests the Segment Class in the Segment Module The automated tests are executed as follows: pytest -v document_test.py pytest -v page_test.py pytest -v words_test.py pytest -v segment_test.py Code Coverage Information on the percent of code that is covered (and what source lines not covered) by the automated tests is obtained using pytest-cov. This version of pytest is installed using pip: pip install pytest-cov Testing with code coverage is executed as follows: pytest --cov=splitter document_test.py page_test.py Statements=456, Missed=60, Percent Covered: 87% pytest --cov=syntax words_test.py Statements=456, Missed=60, Percent Covered: 93% pytest --cov=address words_test.py Statements=456, Missed=60, Percent Covered: 90%","title":"Home"},{"location":"#gap-nlpcv-data-engineering-framework-v093-pre-launch-alpha","text":"","title":"Gap : NLP/CV Data Engineering Framework, v0.9.3 (Pre-launch: alpha)"},{"location":"#natural-language-processing-for-pdf-tiff-and-camera-captured-documents-and","text":"","title":"Natural Language Processing for PDF, TIFF, and Camera Captured Documents, and"},{"location":"#computer-vision-processing-for-images","text":"","title":"Computer Vision Processing for Images"},{"location":"#framework","text":"The Gap NLP/CV data engineering framework provides an easy to get started into the world of machine learning for your unstructured data in PDF documents, scanned documents, TIFF facsimiles and camera captured documents, and your image data in image files and image repositories. NLP Automatic OCR of scanned PDF and camera captured images. Automatic Text Extraction from documents. Automatic Syntax Analysis. Optional Romanization of Latin-1 diacritic characters. Optional Spell Correction. Programmatic control for data extraction or redaction (de-identification). Names, Addresses, Proper Places Social Security Numbers, Data of Birth, Gender, Age Telephone Numbers Numerical Information (e.g., medical, financial, \u2026) and units of measurement. Unit conversion from US Standard to Metric, and vice-versa Unicode character recognition Machine Training of Document and Page Classification. Asynchronous processing of documents. Automatic generation of NLP machine learning ready data. The framework consists of a sequence of Python modules which can be retrofitted into a variety of configurations. The framework is designed to fit seamlessly and scale with an accompanying infrastructure. To achieve this, the design incorporates: Problem and Modular Decomposition utilizing Object Oriented Programming Principles. Isolation of Operations and Parallel Execution utilizing Functional Programming Principles. High Performance utilizing Performance Optimized Python Structures and Libraries. High Reliability and Accuracy using Test Driven Development Methodology.","title":"Framework"},{"location":"#audience","text":"This framework is ideal for any organization planning to do: Data extraction from their repository of documents into an RDBMS system for CART analysis, linear/logistic regressions, or generating word vectors for natural language deep learning (DeepNLP). Generating machine learning ready datan from their repository of images for computer vision.","title":"Audience"},{"location":"#license","text":"The source code is made available under the Apache 2.0 license: Apache 2.0","title":"License"},{"location":"#prerequites","text":"The Gap framework extensively uses a number of open source applications/modules. The following applications and modules will be downloaded and installed on your computer/laptop, when the package is installed. Artifex's Ghostscript - extracting text from text PDF ImageMagic's Magick - extracting image from scanned PDF Google's Tesseract - OCR of scanned/image captured text NLTK (Natural Language Toolkit) - stemming/lemmatizer/parts of speech annotation unidecode - romanization of latin character codes numpy - high performance in-memory arrays (tensors) HDF5 - high performance of on-disk data (tensors) access openCV - image manipulation and processing for computer vision imutils - image manipulation for computer vision pyaspeller - spelling dictionary for text","title":"Prerequites"},{"location":"#pip-installation","text":"The Gap framework is supported on Windows, MacOS, and Linux. It has been packaged for distribution via PyPi on launch. install miniconda (optional) Create an environment with: conda create -n gap python==3.7 jupyter Activate: source activate gap Deactivate: source deactivate install GapML: pip install gapml Dependecies if you are on Linux or Mac : + Tesseract: conda install -c conda-forge tesseract + Ghostscript: conda install -c conda-forge ghostscript + Imagemagick: conda install -c conda-forge imagemagick for Windows get the executables in the following links: + Ghostscript: https://www.ghostscript.com/download/gsdnld.html + Imagemagick: https://www.imagemagick.org/script/download.php + Tesseract: https://github.com/UB-Mannheim/tesseract/wiki","title":"Pip Installation:"},{"location":"#setuppy-installation","text":"To install GapML via setup.py: clone from the Github repo. git clone https://github.com/gapml/NLP.git install the GapML setup file. python setup.py install","title":"Setup.py Installation:"},{"location":"#modules","text":"The framework provides the following pipeline of modules to support your data and knowledge extraction from both digital and scanned PDF documents, TIFF facsimiles and image captured documents.","title":"Modules"},{"location":"#splitter","text":"The splitter module is the NLP entry point into the pipeline. It consists of a Document and Page class. The Document class handles the splitting of PDF documents into PDF pages, TIFF facsimiles into TIFF pages, OCR and raw text extraction. PDF splitting and image extraction is handled by the open source Artifex\u2019s Ghostscript \u00a9, and TIFF splitting by open source Image Magic\u2019s Magick \u00a9. OCR is handled by the open source Google\u2019s Tesseract \u00a9. The Document object stores the individual PDF/TIFF/image pages and corresponding raw text and optionally page images (when scanned PDF, TIFF or images) in the specified storage path. The splitting process can be done synchronously or asynchronously, where in the latter case an event handler signals when the splitting/OCR has been completed and the page table is accessible. For OCR, the resolution of the image extraction is settable, which will affect the quality of the OCR, and corresponding processing time. If the resolution of the original scanned page is lower than the setting, it will be up-sampled, and conversely if it is higher it will be down-sampled. The Page class handles access to the individual pages, via the page table of the document class. Access is provided to the individual PDF, TIFF or image page, the scanned image (when scanned PDF, TIFF or images), raw text and the Natural Language Processing (NLP) processed tokens (when SYNTAX module is installed). NLP processing of the raw text is deferred until first access (JIT), and then preserved in memory as long as the corresponding page object is referenced. The NLP processed tokens may be further segmented into regions, consisting of tables, paragraphs, columns, etc. when the SEGMENTATION module is installed. The document and corresponding pages may be classified (i.e., category of the content) when the CLASSIFICATION module is installed.","title":"SPLITTER"},{"location":"#syntax","text":"The syntax module follows the splitter module in the pipeline. It consists of the Words and Vocabulary classes. The Words class handles natural language processing (NLP) of the extracted text. The NLP processing can be configured for tokenization, stemming, lemmatizing, stop word removal, syntax analysis and word classification, with Unicode support. The word classifier recognizes: Syntax Units: Articles, Demonstratives, Prepositions, Pronouns, Conjunctions, Quantifiers, Questions Abbreviations Acronyms Gender (inclusive of Transgender) Date of Birth USA and Canadian Addresses USA and Canadian Telephone Numbers USA Social Security numbers USA and ISO Standard for Dates USA and ISO Standard for Numbers and units of measure. Geographic Locations Sentiment Dates, numbers and units of measure can be converted to either USA Standard or ISO Standard. USA and Canadian postal addresses are converted to the USPO standard for address matching. Along with the builtin stemmer and lemmatizer, the module can optionally be configured to use the NLTK (open source) stemmers, lemmatizer and parts of speech annotations.","title":"SYNTAX"},{"location":"#segmentation","text":"The segmentation module was introduced as part of the pre-launch of Gap v0.9. It currently is in the demonstration stage, and not ready for commericial-product code ready. The segmentation module examines the whitespace layout of the text to identify 'human' layout of text and corresponding context, such as paragraphs, headings, columns, page numbering, letterhead, etc. The text is then separated into segments based on recognized layout and within the segments the text is NLP preprocessed. In this mode, the NLP preprocessed text is hierarchical. At the top level are the segments, with corresponding segment tag, and the child is the NLP preprocessed text within the segment.","title":"SEGMENTATION"},{"location":"#users-guide","text":"The User's (Programming) Quick Start Guide can be found here","title":"User's Guide"},{"location":"#releases","text":"-- describe here","title":"Releases"},{"location":"#testing","text":"The GAP framework is developed using Test Driven Development methodology. The automated unit tests for the framework use pytest, which is a xUnit style form of testing (e.g., jUnit, nUnit, jsUnit, etc).","title":"Testing"},{"location":"#installation-and-documentation","text":"The pytest application can be installed using pip: pip install pytest Online documentation for pytest","title":"Installation and Documentation"},{"location":"#execution","text":"The following are the pre-built automated unit tests, which are located under the subdirectory tests: document_test.py # Tests the Document Class in the Splitter Module page_test.py # Tests the Page Class in the Splitter Module words_test.py # Tests the Words and Addresses Class in the Syntax Module segment_test.py # Tests the Segment Class in the Segment Module The automated tests are executed as follows: pytest -v document_test.py pytest -v page_test.py pytest -v words_test.py pytest -v segment_test.py","title":"Execution"},{"location":"#code-coverage","text":"Information on the percent of code that is covered (and what source lines not covered) by the automated tests is obtained using pytest-cov. This version of pytest is installed using pip: pip install pytest-cov Testing with code coverage is executed as follows: pytest --cov=splitter document_test.py page_test.py Statements=456, Missed=60, Percent Covered: 87% pytest --cov=syntax words_test.py Statements=456, Missed=60, Percent Covered: 93% pytest --cov=address words_test.py Statements=456, Missed=60, Percent Covered: 90%","title":"Code Coverage"},{"location":"about/","text":"Gap Natural Language Processing for PDF/TIFF/Image Documents Framework The Gap NLP open source framework provides an easy to get started into the world of machine learning for your unstructured data in PDF documents, scanned documents, TIFF facsimiles, camera captured documents, and computer vision for your image data. Automatic OCR of scanned and camera captured images. Automatic Text Extraction from documents. Automatic Syntax Analysis. Programmatic control for data extraction or redaction (de-identification) Names, Addresses, Proper Places Social Security Numbers, Data of Birth, Gender Telephone Numbers Numerical Information (e.g., medical, financial, \u2026) and units of measurement. Unit conversion from US Standard to Metric, and vice-versa Unicode character recognition Machine Training of Document and Page Classification. Automatic image preparation (resizing, sampling) and storage (HD5) for convolutional neural networks. The framework consists of a sequence of Python modules which can be retrofitted into a variety of configurations. The framework is designed to fit seamlessly and scale with an accompanying infrastructure. To achieve this, the design incorporates: Problem and Modular Decomposition utilizing Object Oriented Programming Principles. Isolation of Operations and Parallel Execution utilizing Functional Programming Principles. High Performance utilizing Performance Optimized Python Structures and Libraries. High Reliability and Accuracy using Test Driven Development Methodology. The framework provides the following pipeline of modules to support your data and knowledge extraction from both digital and scanned PDF documents, TIFF facsimiles and image captured documents, and for preparing and storing image data for computer vision. This framework is ideal for any organization planning to do data extraction from their repository of documents into an RDBMS system for CART analysis or generating word vectors for natural language deep learning (DeepNLP), and/or computer vision with convolutional neural networks (CNN). SPLITTER The splitter module is the entry point into the pipeline. It consists of a Document and Page class. The Document class handles the splitting of PDF documents into PDF pages, TIFF facsimiles into TIFF pages, OCR and raw text extraction. PDF splitting and image extraction is handled by the open source Artifex\u2019s Ghostscript \u00a9, and TIFF splitting by open source Image Magic\u2019s Magick \u00a9. OCR is handled by the open source Google\u2019s Tesseract \u00a9. The Document object stores the individual PDF/TIFF/image pages and corresponding raw text and optionally page images (when scanned PDF, TIFF or images) in the specified storage path. The splitting process can be done synchronously or asynchronously, where in the latter case an event handler signals when the splitting/OCR has been completed and the page table is accessible. For OCR, the resolution of the image extraction is settable, which will affect the quality of the OCR, and corresponding processing time. If the resolution of the original scanned page is lower than the setting, it will be up-sampled, and conversely if it is higher it will be down-sampled. The Page class handles access to the individual pages, via the page table of the document class. Access is provided to the individual PDF, TIFF or image page, the scanned image (when scanned PDF, TIFF or images), raw text and the Natural Language Processing (NLP) processed tokens (when SYNTAX module is installed). NLP processing of the raw text is deferred until first access (JIT), and then preserved in memory as long as the corresponding page object is referenced. The NLP processed tokens may be further segmented into regions, consisting of tables, paragraphs, columns, etc. when the SEGMENTATION module is installed. The document and corresponding pages may be classified (i.e., category of the content) when the CLASSIFICATION module is installed. SYNTAX The syntax module follows the splitter module in the pipeline. It consists of the Words and Vocabulary classes. The Words class handles natural language processing (NLP) of the extracted text. The NLP processing can be configured for tokenization, stemming, lemmatizing, stop word removal, syntax analysis and word classification, with Unicode support. The word classifier recognizes: Syntax Units: Articles, Demonstratives, Prepositions, Pronouns, Conjunctions, Quantifiers, Questions Abbreviations Acronyms Gender (inclusive of Transgender) Date of Birth USA and Canadian Addresses USA and Canadian Telephone Numbers USA Social Security numbers USA and ISO Standard for Dates USA and ISO Standard for Numbers and units of measure. Geographic Locations Sentiment Dates, numbers and units of measure can be converted to either USA Standard or ISO Standard. USA and Canadian postal addresses are converted to the USPO standard for address matching. Along with the builtin stemmer and lemmatizer, the module can optionally be configured to use the NLTK (open source) stemmers, lemmatizer and parts of speech annotations. MODULES Proprietary and Confidential Information Copyright \u00a92018, Epipog, All Rights Reserved","title":"About"},{"location":"about/#gap","text":"","title":"Gap"},{"location":"about/#natural-language-processing-for-pdftiffimage-documents","text":"","title":"Natural Language Processing for PDF/TIFF/Image Documents"},{"location":"about/#framework","text":"The Gap NLP open source framework provides an easy to get started into the world of machine learning for your unstructured data in PDF documents, scanned documents, TIFF facsimiles, camera captured documents, and computer vision for your image data. Automatic OCR of scanned and camera captured images. Automatic Text Extraction from documents. Automatic Syntax Analysis. Programmatic control for data extraction or redaction (de-identification) Names, Addresses, Proper Places Social Security Numbers, Data of Birth, Gender Telephone Numbers Numerical Information (e.g., medical, financial, \u2026) and units of measurement. Unit conversion from US Standard to Metric, and vice-versa Unicode character recognition Machine Training of Document and Page Classification. Automatic image preparation (resizing, sampling) and storage (HD5) for convolutional neural networks. The framework consists of a sequence of Python modules which can be retrofitted into a variety of configurations. The framework is designed to fit seamlessly and scale with an accompanying infrastructure. To achieve this, the design incorporates: Problem and Modular Decomposition utilizing Object Oriented Programming Principles. Isolation of Operations and Parallel Execution utilizing Functional Programming Principles. High Performance utilizing Performance Optimized Python Structures and Libraries. High Reliability and Accuracy using Test Driven Development Methodology. The framework provides the following pipeline of modules to support your data and knowledge extraction from both digital and scanned PDF documents, TIFF facsimiles and image captured documents, and for preparing and storing image data for computer vision. This framework is ideal for any organization planning to do data extraction from their repository of documents into an RDBMS system for CART analysis or generating word vectors for natural language deep learning (DeepNLP), and/or computer vision with convolutional neural networks (CNN).","title":"Framework"},{"location":"about/#splitter","text":"The splitter module is the entry point into the pipeline. It consists of a Document and Page class. The Document class handles the splitting of PDF documents into PDF pages, TIFF facsimiles into TIFF pages, OCR and raw text extraction. PDF splitting and image extraction is handled by the open source Artifex\u2019s Ghostscript \u00a9, and TIFF splitting by open source Image Magic\u2019s Magick \u00a9. OCR is handled by the open source Google\u2019s Tesseract \u00a9. The Document object stores the individual PDF/TIFF/image pages and corresponding raw text and optionally page images (when scanned PDF, TIFF or images) in the specified storage path. The splitting process can be done synchronously or asynchronously, where in the latter case an event handler signals when the splitting/OCR has been completed and the page table is accessible. For OCR, the resolution of the image extraction is settable, which will affect the quality of the OCR, and corresponding processing time. If the resolution of the original scanned page is lower than the setting, it will be up-sampled, and conversely if it is higher it will be down-sampled. The Page class handles access to the individual pages, via the page table of the document class. Access is provided to the individual PDF, TIFF or image page, the scanned image (when scanned PDF, TIFF or images), raw text and the Natural Language Processing (NLP) processed tokens (when SYNTAX module is installed). NLP processing of the raw text is deferred until first access (JIT), and then preserved in memory as long as the corresponding page object is referenced. The NLP processed tokens may be further segmented into regions, consisting of tables, paragraphs, columns, etc. when the SEGMENTATION module is installed. The document and corresponding pages may be classified (i.e., category of the content) when the CLASSIFICATION module is installed.","title":"SPLITTER"},{"location":"about/#syntax","text":"The syntax module follows the splitter module in the pipeline. It consists of the Words and Vocabulary classes. The Words class handles natural language processing (NLP) of the extracted text. The NLP processing can be configured for tokenization, stemming, lemmatizing, stop word removal, syntax analysis and word classification, with Unicode support. The word classifier recognizes: Syntax Units: Articles, Demonstratives, Prepositions, Pronouns, Conjunctions, Quantifiers, Questions Abbreviations Acronyms Gender (inclusive of Transgender) Date of Birth USA and Canadian Addresses USA and Canadian Telephone Numbers USA Social Security numbers USA and ISO Standard for Dates USA and ISO Standard for Numbers and units of measure. Geographic Locations Sentiment Dates, numbers and units of measure can be converted to either USA Standard or ISO Standard. USA and Canadian postal addresses are converted to the USPO standard for address matching. Along with the builtin stemmer and lemmatizer, the module can optionally be configured to use the NLTK (open source) stemmers, lemmatizer and parts of speech annotations.","title":"SYNTAX"},{"location":"about/#modules","text":"Proprietary and Confidential Information Copyright \u00a92018, Epipog, All Rights Reserved","title":"MODULES"},{"location":"org-os/","text":"Gap Open Source Organization Background Open Source Frameworks being released at a record pass (Tensorflow, Theano, Caffe, Keras, MXNet, Neon, ...). - The frameworks with wide adoption are supported and sponsored by the Big 5 (Google, Facebook, Microsoft, Apple, Amazon) and others. - Mass technical staff, years in development, deep pocket budgets. On this scale, is it realistic anymore for a grassroots open source project to release a machine learning framework of the same caliber and adoption? Purpose / Reason Why us, why this project? -- describe here The open source organization for Epipog is proposed as the following: Governance Body The Governance Body would be equalivant to a Board in a Corporate or Non-Profit, with the following role: 1. Formation of the Organization, as a non-profit entity. 2. Set the equivalent of an Articles of Incorporation. 3. Set the Code of Conduct rules. 4. Approve Executive Committee members. Executive Committee The Executive Committee would be equivalent to Executive Officers in a Corporate or Non-Profit, with the following role: 1. Set the Goals and Direction. 2. Set Release and Content. 3. Onboard Project Managers. 4. Develop Relationships in the Development Community. 5. Develop Corporate Sponsorships. Andrew Ferlitsch - Executive Director Project Managers The Project Managers would be equivalent to Project Managers/Leads in a Corporate or Non-Profit, with the following role: 1. Take Ownership of a section of the code. 2. Recruit contributers. 3. Make contributions. Chris Heckler - QA Project Manager David Molina - Linguistics Project Lead Rene Mesias - Admin Project Manager Contributers The Contributers would be equivalent to Technical Staff in a Corporate or Non-Profit, with the following role: 1. Make contributions to the source code under the direction of the Project Manager. Gap Source Code and Intellectual Property The source code and intellectual property will be assigned to (owned) by the formed entity. The entity will make the source code and intellectual property freely available to the public through the Apache Foundation 2.0 License.","title":"Organization"},{"location":"org-os/#gap-open-source-organization","text":"","title":"Gap Open Source Organization"},{"location":"org-os/#background","text":"Open Source Frameworks being released at a record pass (Tensorflow, Theano, Caffe, Keras, MXNet, Neon, ...). - The frameworks with wide adoption are supported and sponsored by the Big 5 (Google, Facebook, Microsoft, Apple, Amazon) and others. - Mass technical staff, years in development, deep pocket budgets. On this scale, is it realistic anymore for a grassroots open source project to release a machine learning framework of the same caliber and adoption?","title":"Background"},{"location":"org-os/#purpose-reason","text":"Why us, why this project? -- describe here The open source organization for Epipog is proposed as the following:","title":"Purpose / Reason"},{"location":"org-os/#governance-body","text":"The Governance Body would be equalivant to a Board in a Corporate or Non-Profit, with the following role: 1. Formation of the Organization, as a non-profit entity. 2. Set the equivalent of an Articles of Incorporation. 3. Set the Code of Conduct rules. 4. Approve Executive Committee members.","title":"Governance Body"},{"location":"org-os/#executive-committee","text":"The Executive Committee would be equivalent to Executive Officers in a Corporate or Non-Profit, with the following role: 1. Set the Goals and Direction. 2. Set Release and Content. 3. Onboard Project Managers. 4. Develop Relationships in the Development Community. 5. Develop Corporate Sponsorships. Andrew Ferlitsch - Executive Director","title":"Executive Committee"},{"location":"org-os/#project-managers","text":"The Project Managers would be equivalent to Project Managers/Leads in a Corporate or Non-Profit, with the following role: 1. Take Ownership of a section of the code. 2. Recruit contributers. 3. Make contributions. Chris Heckler - QA Project Manager David Molina - Linguistics Project Lead Rene Mesias - Admin Project Manager","title":"Project Managers"},{"location":"org-os/#contributers","text":"The Contributers would be equivalent to Technical Staff in a Corporate or Non-Profit, with the following role: 1. Make contributions to the source code under the direction of the Project Manager.","title":"Contributers"},{"location":"org-os/#gap-source-code-and-intellectual-property","text":"The source code and intellectual property will be assigned to (owned) by the formed entity. The entity will make the source code and intellectual property freely available to the public through the Apache Foundation 2.0 License.","title":"Gap Source Code and Intellectual Property"},{"location":"quick-start-guide/","text":"Natural Language Processing for PDF/TIFF/Image Documents Users Guide High Precision Natural Language Processing for PDF/TIFF/Image Documents Users Guide, Gap v0.9.2 1 Introduction The target audience for this users guide are your software developers whom will be integrating the core inner block into your product and/or service. It is not meant to be a complete reference guide or comprehensive tutorial, but a brief get started guide. To utilize this module, the Gap framework will automatically install: 1. This Python module. 2. Python 3.6 or latter 3. Ghostscript \u00a9(open source from Artifex). [will auto-install with pip install]. 4. Tesseract \u00a9(open source from Google). [will auto-install with pip install]. 5. Magick \u00a9(open source from Image Magic). [will auto-install with pip install]. 6. NLTK Toolkit (open source) [will auto-install with pip install]. 7. Unidecode (open source) [will auto-install with pip install]. 8. HD5 (open source) [will auto-install with pip install]. 9. Numpy (open source) [will auto-install with pip install]. 10. OpenCV (open source) [will auto-install with pip install]. 11. Imutils (open source) [will auto-install with pip install]. 2 SPLITTER Module 2.1 Document Loading To load a PDF document, TIFF facsimile or image captured document you create a Document (class) object, passing as parameters the path to the PDF/TIFF/image document and a path for storing the split pages/text. Below is a code example. from gapml.splitter import Document, Page document = Document(\"yourdocument.pdf\", \"storage_path\") 2.2 Page Splitting Upon instantiating a document object, the corresponding PDF document or TIFF facsimile is automatically split into the corresponding PDF or TIFF pages, utilizing Ghostscript (PDF) and Magick (TIFF). Each PDF/TIFF page will be stored separately in the storage path with the following naming convention: <document basename><pageno>.<suffix> , where <suffix> is either pdf or tif The module automatically detects if a PDF document is a digital (text) or scanned PDF (image). For digital documents, the text is extracted directly from the PDF page using Ghostscript and stored separately in the storage path with the following naming convention: <document basename><pageno>.txt 2.3 OCR If the document is a scanned PDF, each page image will be extracted using Ghostscript, then OCR using Tesseract to extract the text content from the page image. The page image and corresponding page text are stored separately in the storage path with the following naming convention: <document basename><pageno>.png <document basename><pageno>.txt If the document is a TIFF facsimile, each page image will be extracted using Magick, then OCR using Tesseract to extract the text content from the page image. The page image and corresponding page text are stored separately in the storage path with the following naming convention: <document basename><pageno>.tif <document basename><pageno>.txt If the document is an image capture (e.g., JPG), the image is OCR using Tesseract to extract the text content from the page image. The page image and corresponding page text are stored separately in the storage path with the following naming convention: <document basename><pageno>.<suffix> , where <suffix> is png or jpg <document basename><pageno>.txt 2.4 Image Resolution for OCR The resolution of the image rendered by Ghostscript from a scanned PDF page will affect the OCR quality and processing time. By default the resolution is set to 300. The resolution can be set for a (or all) documents with the static member RESOLUTION of the Document class. This property only affects the rendering of scanned PDF; it does not affect TIFF facsimile or image capture. # Set the Resolution of Image Extraction of all scanned PDF pages Document.RESOLUTION = 150 # Image Extraction and OCR will be done at 150 dpi for all subsequent documents document = Document(\"scanneddocument.pdf\", \"storage_path\") 2.5 Page Access Each page is represented by a Page (class) object. Access to the page object is obtained from the pages property member of the Document object. The number of pages in the document is returned by the len() builtin operator for the Document class. document = Document(\"yourdocument.pdf\", \"storage_path\") # Get the number of pages in the PDF document npages = len(document) # Get the page table pages = document.pages # Get the first page page1 = pages[0] # or alternately page1 = document[0] # full path location of the PDF/TIFF or image capture page in storage page1_path = page1.path 2.6 Adding Pages Additional pages can be added to the end of an existing Document object using the += (overridden) operator, where the new page will be fully processed. document = Document(\"1page.pdf\") # This will print 1 for 1 page print(len(document)) # Create a Page object for an existing PDF page new_page = Page(\"page_to_add.pdf\") # Add the page to the end of the document. document += new_page # This will print 2 showing now that it is a 2 page document. print(len(document)) 2.7 Text Extraction The raw text for the page is obtained by the text property of the page class. The byte size of the raw text is obtained from the size() method of the Page class. # Get the page table pages = document.pages # Get the first page page1 = pages[0] # Get the total byte size of the raw text bytes = page1.size() # Get the raw text for the page text = page1.text The property scanned is set to True if the text was extracted using OCR; otherwise it is false (i.e., origin was digital text). The property additionally returns a second value which is the estimated quality of the scan as a percentage (between 0 and 1). # Determine if text extraction was obtained by OCR scanned, quality = document.scanned 2.8 Asynchronous Processing To enhance concurrent execution between a main thread and worker activities, the Document class supports asynchronous processing of the document (i.e., Page Splitting, OCR and Text Extraction). Asynchronous processing will occur if the optional parameter ehandler is set when instantiating the Document object. Upon completion of the processing, the ehandler is called, where the Document object is passed as a parameter. def done(d): \"\"\" Event Handler for when processing of document is completed \"\"\" print(\"DONE\", d.document) # Process the document asynchronously document = Document(\"yourdocument.pdf\", \"storage_path\", ehandler=done) 2.9 NLP Preprocessing of the Text NLP preprocessing of the text requires the SYNTAX module. The processing of the raw text into NLP sequenced tokens (syntax) is deferred and is executed in a JIT (Just in Time) principle. If installed, the NLP sequenced tokens are access through the words property of the Page class. The first time the property is accessed for a page, the raw text is preprocessed, and then retained in memory for subsequent access. # Get the page table pages = document.pages # Get the first page page1 = pages[0] # Get the NLP preprocessed text words = page1.words The NLP preprocessed text is stored separately in the storage path with the following naming convention: <document basename><pageno>.json 2.10 NLP Preprocessing Settings (Config) NLP Preprocessing of the text may be configured for several settings when instantiating a Document object with the optional config parameter, which consists of a list of one or more predefined options. document = Document(\"yourdocument.pdf\", \"storage_path\", config=[options]) # options: bare # do bare tokenization stem = internal | # use builtin stemmer porter | # use NLTK Porter stemmer snowball | # use NLTK Snowball stemmer lancaster | # use NLTK Lancaster stemmer lemma | # use NLTK WordNet lemmatizer nostem # no stemming pos # Tag each word with NLTK parts of speech roman # Romanize latin-1 character encodings into ASCII 2.11 Document Reloading Once a Document object has been stored, it can later be retrieved from storage, reconstructing the Page and corresponding Words objects. A document object is first instantiated, and then the load() method is called specifying the document name and corresponding storage path. The document name and storage path are used to identify and locate the corresponding stored pages. # Instantiate a Document object document = Document() # Reload the document's pages from storage document.load( \"mydoc.pdf\", \"mystorage\" ) This will reload pages whose filenames in the storage match the sequence: mystorage/mydoc1.json mystorage/mydoc2.json ... 2.12 Word Frequency Distributions The distribution of word occurrences and percentage in a document and individual pages are obtained using the properties: bagOfWords , freqDist , and termFreq . The bagOfWords property returns an unordered dictionary of each unique word in the document (or page) as a key, and the number of occurrences as the value. # Get the bag of words for the document bow = document.bagOfWords print(bow) will output: { '<word>': <no. of occurrences>, '<word>': <no. of occurrences>, \u2026 } e.g., { 'plan': 20, 'medical': 31, 'doctor': 2, \u2026 } # Get the bag of words for each page in the document for page in document.pages: bow = page.bagOfWords The freqDist property returns a sorted list of each unique word in the document (or page), as a tuple of the word and number of occurrences, sorted by the number of occurrences in descending order. # Get the word frequency (count) distribution for the document count = document.freqDist print(count) will output: [ ('<word>', <no. of occurrences>), ('<word>': <no. of occurrences>), \u2026 ] e.g., [ ('medical', 31), ('plan', 20), \u2026, ('doctor', 2), \u2026 ] # Get the word frequency distribution for each page in the document for page in document.pages: count = page.freqDist The termFreq property returns a sorted list of each unique word in the document (or page), as a tuple of the word and the percentage it occurs in the document, sorted by the percentage in descending order. # Get the term frequency (TF) distribution for the document tf = document.freqDist print(tf) will output: [ ('<word>', <percent>), ('<word>': <percent>), \u2026 ] e.g., [ ('medical', 0.02), ('plan', 0.015), \u2026 ] 2.13 Document and Page Classification Semantic Classification (e.g., category) of the document and individual pages requires the CLASSIFICATION module. The classification is deferred and is executed in a JIT (Just in Time) principle. If installed, the classification is access through the classification property of the document and page classes, respectively. The first time the property is accessed for a document or page, the NLP sequenced tokens for each page are processed for classification of the content of individual pages and the first page is further processed for the classification of the content of the entire document. # Get the classification for the document document_classification = document.label # Get the classification for each page for gapml.page in document.pages: classification = page.label 3 SYNTAX Module 3.1 NLP Processing The Words (class) object does the NLP preprocessing of the extracted (raw) text. If the extracted text is from a Page object (see SPLITTER ), the NLP preprocessing occurs the first time the words property of the Page object is accessed. from gapml.syntax import Words, Vocabulary # Get the first page in the document page = document.pages[0] # Get the raw text from the page as a string text = page.text # Get the NLP processed words (Words class) object from the page as a list. words = page.words # Print the object type of words => <class 'Document.Words'> type(words) 3.2 Words Properties The Words (class) object has four public properties: text , words , bagOfWords , and freqDist . The text property is used to access the raw text and the words property is used to access the NLP processed tokens from the raw text. # Get the NLP processed words (Words class) object from the page as a list. words = page.words # Get the original (raw) text as a string text = words.text The words property is used to access NLP preprocessed list of words. # Get the NLP processed words from the original text as a Python list. words = words.words # Print the object type of words => <class 'list'> type(words) The bagOfWords and freqDist properties are explained later in the guide. 3.3 Vocabulary Dictionary The words property returns a sequenced Python list of words as a dictionary from the Vocabulary class. Each word in the list is of the dictionary format: { 'word' : word, # The stemmed version of the word 'lemma' : word, # The lemma version of the word 'tag' : tag # The word classification } 3.4 Traversing the NLP Processed Words The NLP processed words returned from the words property are sequenced in the same order as the original text. All punctuation is removed, and except for detected Acronyms, all remaining words are lowercased. The sequenced list of words may be a subset of the original words, depending on the stopwords properties and may be stemmed, lemma, or replaced. # Get the NLP processed words from the original text as a Python list. words = words.words # Traverse the sequenced list of NLP processed words for word in words: text = word.word # original or replaced version of the word tag = word.tag # syntactical classification of the word lemma = word.lemma # The lemma version of the word 3.5 Stopwords The properties which determine which words are removed, stemmed, lemmatized, or replaced are set as keyword parameters in the constructor for the Words class. If no keyword parameters are specified, then all stopwords are removed after being stemmed/lemmatized. The list of stopwords is a superset of the Porter list and additionally includes removing additionally syntactical constructs such as numbers, dates, etc. For a complete list, see the reference manual. If the keyword parameter stopwords is set to False , then all word removal is disabled, while stemming/lemmatization/reducing are still enabled, along with the removal of punctuation. Note in the example below, while stopwords is disabled, the word jumping is replaced with its stem jump. # No stopword removal words = Words(\"The lazy brown fox jumped over the fence.\", stopwords=False) # words => \"the\", \"lazy\", \"brown\", \"fox\", \"jump\", \"over\", \"the\", \"fence\" # All stopword removal words = Words(\"The lazy brown fox jumped over the fence.\", stopwords=True) # words => \"lazy\", \"brown\", \"fox\", \"jump\", \"fence\" 3.6 Bare When the keyword parameter bare is True , all stopword removal, stemming/lemmatization/reducing and punctuation removal are disabled. # Bare Mode words = Words(\"The lazy brown fox jumped over the fence.\", bare=False) # words => \"the\", \"lazy\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"fence\", \".\" 3.7 Numbers When the keyword parameter number is True , text and numeric version of numbers are preserved; otherwise they are removed. Numbers which are text based (e.g., one) are converted to their numeric representation (e.g., one => 1). The tag value for numbers is set to Vocabulary.NUMBER . # keep/replace numbers words = Words(\"one twenty-one 33.7 1/4\", number=True) print(words.words) will output: [ { 'word': '1', tag: Vocabulary.NUMBER }, { 'word': '21', tag: Vocabulary.NUMBER }, { 'word': '33.7', tag: tag: Vocabulary.NUMBER }, { 'word': '0.25', tag: tag: Vocabulary.NUMBER }, ] If a number is followed by a text representation of a multiplier unit (i.e., million), the number and multiplier unit are replaced by the multiplied value. words = Words(\"two million\", number=True) print(words.words) will output: [ { 'word': '2000000', tag: Vocabulary.NUMBER}, ] 3.8 Unit of Measurement When the keyword parameter unit is True , US Standard and Metric units of measurement are preserved; otherwise they are removed. Both US and EU spelling of metric units are recognized (e.g., meter/metre, liter/litre). The tag value for units of measurement is set to Vocabulary.UNIT . # keep/replace unit words = Words(\"10 liters\", number=True, unit=True) print(words.words) will output: [ { 'word': '10', tag: Vocabulary.NUMBER }, { 'word': 'liter', tag: Vocabulary.UNIT }, ] 3.9 Standard vs. Metric When the keyword parameter standard is True , Metric units of measurement are converted to US Standard. When the keyword parameter metric is True , Standard units of measurement are converted to Metric Standard. # keep/replace unit words = Words(\"10 liters\", number=True, unit=True standard=True) print(words.words) will output: [ { 'word': '2.64172', tag: Vocabulary.NUMBER }, { 'word': 'gallon', tag: Vocabulary.UNIT }, ] 3.10 Date When the keyword parameter date is True , USA and ISO standard date representation and text representation of dates are preserved; otherwise they are removed. Dates are converted to the ISO standard and the tag value is set to Vocabulary.DATE . # keep/replace dates words = Words(\"Jan 2, 2017 and 01/02/2017\", date=True) print(words.words) will output: [ { 'word': '2017-01-02', tag: Vocabulary.DATE }, { 'word': '2017-01-02', tag: Vocabulary.DATE }, ] 3.11 Date of Birth When the keyword parameter dob is True , date of births are preserved; otherwise they are removed. Date of births are converted to the ISO standard and the tag value is set to Vocabulary.DOB . # keep/replace dates words = Words(\"Date of Birth: Jan. 2 2017 DOB: 01-02-2017\", dob=True) print(words.words) will output: [ { 'word': '2017-01-02', tag: Vocabulary.DOB }, { 'word': '2017-01-02', tag: Vocabulary.DOB }, ] If dat e is set to True without dob (date of birth) set to True , date of births will be removed while other dates will be preserved. \u2003 3.12 Social Security Number When the keyword parameter ssn is True , USA Social Security numbers are preserved; otherwise they are removed. Social Security numbers are detected from the prefix presence of text sequences indicating a Social Security number will follow, such as SSN, Soc. Sec., Social Security, etc. Social Security numbers are converted to their single 9 digit value and the tag value is set to Vocabulary.SSN . # keep/replace dates words = Words(\"SSN: 12-123-1234 Social Security 12 123 1234\", ssn=True) print(words.words) will output: [ { 'word': '121231234', tag: Vocabulary.SSN }, { 'word': '121231234', tag: Vocabulary.SSN }, ] 3.13 Telephone Number When the keyword parameter telephone is True , USA/CA telephone numbers are preserved; otherwise they are removed. Telephone numbers are detected from the prefix presence of text sequences indicating a telephone number will follow, such Phone:, Mobile Number, etc. Telephone numbers are converted to their single 10 digit value, inclusive of area code, and the tag value is set to one of: Vocabulary.TELEPHONE Vocabulary.TELEPHONE_HOME Vocabulary.TELEPHONE_WORK Vocabulary.TELEPHONE_OFFICE Vocabulary.TELEPHONE_FAX # keep/replace dates words = Words(\"Phone: (360) 123-1234, Office Number: 360-123-1234\", telephone=True) print(words.words) will output: [ { 'word': '3601231234', tag: Vocabulary.TELEPHONE }, { 'word': '3601231234', tag: Vocabulary.TELEPHONE_WORK}, ] 3.14 Address When the keyword parameter address is True , USA/CA street and postal addresses are preserved; otherwise they are removed. Each component in the address is tagged according to the above street/postal address component type, as follows: Postal Box (Vocabulary.POB) Street Number (Vocabuary.STREET_NUM) Street Direction (Vocabuary.STREET_DIR) Street Name (Vocabuary.STREET_NAME) Street Type (Vocabuary.STREET_TYPE) Secondary Address (Vocabuary.STREET_ADDR2) City (Vocabulary.CITY) State (Vocabulary.STATE) Postal (Vocabulary.POSTAL) # keep/replace street addresses words = Words(\"12 S.E. Main Ave, Seattle, WA\", gender=True) print(words.words) will output: [ { 'word': '12', tag: Vocabulary.STREET_NUM }, { 'word': 'southeast', tag: Vocabulary.STREET_DIR }, { 'word': 'main', tag: Vocabulary.STREET_NAME }, { 'word': 'avenue', tag: Vocabulary.STREET_TYPE }, { 'word': 'seattle', tag: Vocabulary.CITY }, { 'word': 'ISO316-2:US-WA', tag: Vocabulary.STATE }, ] 3.15 Gender When the keyword parameter gender is True , words indicating gender are preserved; otherwise they are removed. Transgender is inclusive in the recognition. The tag value is set to one of Vocabulary.MALE , Vocabulary.FEMALE or Vocabulary.TRANSGENDER . # keep/replace gender indicating words words = Words(\"man uncle mother women tg\", gender=True) print(words.words) will output: [ { 'word': 'man', tag: Vocabulary.MALE }, { 'word': 'uncle', tag: Vocabulary.MALE }, { 'word': 'mother', tag: Vocabulary.FEMALE }, { 'word': 'women', tag: Vocabulary.FEMALE }, { 'word': 'transgender', tag: Vocabulary.TRANSGENDER }, ] 3.16 Sentiment When the keyword parameter sentiment is True, word and word phrases indicating sentiment are preserved; otherwise they are removed. Sentiment phrases are reduced to the single primary word indicating the sentiment and the tag value is set to either Vocabulary.POSITIVE or Vocabulary.NEGATIVE . # keep/replace sentiment indicating phrases words = Words(\"the food was not good\", sentiment=True) print(words.words) will output: [ { 'word': 'food', tag: Vocabulary.UNTAG }, { 'word': 'not', tag: Vocabulary.NEGATIVE}, ] 3.17 Spell Checking When the keyword parameter spell is set to one of 'en', 'es', 'fr', 'de', or 'it', each tokenized word is looked up in the builtin Norvig speller for the corresponding language (e.g., en = English). If the word is not found (presumed misspelled) and the Norvig recommends a replacement, the word is replaced with the Norvig replacement. The spell check/replacement occurs prior to stemming, lemmatizing, and stopword removal. # add parts of speech tagging words = Words(\"mispelled\", spell='en') print(words.words) will output: [ { 'word': 'misspell', 'tag': Vocabulary.UNTAG}, ] 3.18 Parts of Speech When the keyword parameter pos is True , each tokenized word is further annotated with it's corresponding NLTK parts of speech tag. # add parts of speech tagging words = Words(\"Jim Smith\", pos=True) print(words.words) will output: [ { 'word': 'food', 'tag': Vocabulary.UNTAG, 'pos': NN }, { 'word': 'not', 'tag': Vocabulary.NEGATIVE, 'pos': NN }, ] 3.19 Romanization When the keyword parameter roman is True , the latin-1 character encoding of each tokenized is converted to ASCII. # Romanization of latin-1 character encodings words = Words(\"Qu\u00e9bec\", roman=True) print(words.words) will output: [ { 'word': 'quebec', 'tag': Vocabulary.UNTAG, ] 3.20 Bag of Words and Word Frequency Distribution The property bagsOfWords returns an unordered dictionary of each occurrence of a unique word in the tokenized sequence, where the word is the dictionary key, and the number of occurrences is the corresponding value. # Get the Bag of Words representation words = Words(\"Jack and Jill went up the hill to fetch a pail of water. Jack fell down and broke his crown and Jill came tumbling after.\", stopwords=True) print(words.bagOfWords) will output: { 'pail': 1, 'the': 1, 'a': 1, 'water': 1, 'fetch': 1, 'went': 1, 'and': 2, 'jack': 2, 'jill': 2, 'down': 1, 'come': 1, 'fell': 1, 'up': 1, 'of': 1, 'tumble': 1, 'to': 1, 'hill': 1, 'after': 1 } The property freqDist returns a sorted list of tuples, in descending order, of word frequencies (i.e., the number of occurrences of the word in the tokenized sequence. # Get the Word Frequency Distribution words = Words(\"Jack and Jill went up the hill to fetch a pail of water. Jack fell down and broke his crown and Jill came tumbling after.\", stopwords=True) print(words.freqDist) will output: [ ('jack', 2), ('jill', 2), ('and', 2), ('water', 1), ('the', 1), \u2026 ] 4 SEGMENTATION Module The segmentation module is newly introduced in Gap v0.9 prelaunch. It is in the early stage, and should be considered experimental, and not for commercial-product-ready yet. The segmentation module analyzes the whitespace layout of the text to identify the 'human' perceived grouping/purpose of text, such as paragraphs, headings, columns, page numbering, letterhead, etc., and the associated context. In this mode, the text is separated into segments, corresponding to identified layout, where each segment is then NLP preprocessed. The resulting NLP output is then hierarchical, where at the top level is the segment identification, and it's child is the NLP preprocessed text. 4.1 Text Segmentation When the config option 'segment' is specified on a Document object, the corresponding text per page is segmented. # import the segmentation module from gapml.segment import Segment segment = Segment(\"para 1\\n\\npara 2\") print(segment.segments) will output: [ { 'tag': 1002, words: [ { 'word': 'para', 'tag': 0}, {'word': 1, 'tag': 1}]}, { 'tag': 1002, words: [ { 'word': 'para', 'tag': 0}, {'word': 2, 'tag': 1}]} ] Proprietary Information Copyright \u00a92018, Epipog, All Rights Reserved","title":"Quick Start Guide"},{"location":"quick-start-guide/#natural-language-processing-for-pdftiffimage-documents","text":"Users Guide High Precision Natural Language Processing for PDF/TIFF/Image Documents Users Guide, Gap v0.9.2","title":"Natural Language Processing for PDF/TIFF/Image Documents"},{"location":"quick-start-guide/#1-introduction","text":"The target audience for this users guide are your software developers whom will be integrating the core inner block into your product and/or service. It is not meant to be a complete reference guide or comprehensive tutorial, but a brief get started guide. To utilize this module, the Gap framework will automatically install: 1. This Python module. 2. Python 3.6 or latter 3. Ghostscript \u00a9(open source from Artifex). [will auto-install with pip install]. 4. Tesseract \u00a9(open source from Google). [will auto-install with pip install]. 5. Magick \u00a9(open source from Image Magic). [will auto-install with pip install]. 6. NLTK Toolkit (open source) [will auto-install with pip install]. 7. Unidecode (open source) [will auto-install with pip install]. 8. HD5 (open source) [will auto-install with pip install]. 9. Numpy (open source) [will auto-install with pip install]. 10. OpenCV (open source) [will auto-install with pip install]. 11. Imutils (open source) [will auto-install with pip install].","title":"1 Introduction"},{"location":"quick-start-guide/#2-splitter-module","text":"","title":"2 SPLITTER Module"},{"location":"quick-start-guide/#21-document-loading","text":"To load a PDF document, TIFF facsimile or image captured document you create a Document (class) object, passing as parameters the path to the PDF/TIFF/image document and a path for storing the split pages/text. Below is a code example. from gapml.splitter import Document, Page document = Document(\"yourdocument.pdf\", \"storage_path\")","title":"2.1 Document Loading"},{"location":"quick-start-guide/#22-page-splitting","text":"Upon instantiating a document object, the corresponding PDF document or TIFF facsimile is automatically split into the corresponding PDF or TIFF pages, utilizing Ghostscript (PDF) and Magick (TIFF). Each PDF/TIFF page will be stored separately in the storage path with the following naming convention: <document basename><pageno>.<suffix> , where <suffix> is either pdf or tif The module automatically detects if a PDF document is a digital (text) or scanned PDF (image). For digital documents, the text is extracted directly from the PDF page using Ghostscript and stored separately in the storage path with the following naming convention: <document basename><pageno>.txt","title":"2.2 Page Splitting"},{"location":"quick-start-guide/#23-ocr","text":"If the document is a scanned PDF, each page image will be extracted using Ghostscript, then OCR using Tesseract to extract the text content from the page image. The page image and corresponding page text are stored separately in the storage path with the following naming convention: <document basename><pageno>.png <document basename><pageno>.txt If the document is a TIFF facsimile, each page image will be extracted using Magick, then OCR using Tesseract to extract the text content from the page image. The page image and corresponding page text are stored separately in the storage path with the following naming convention: <document basename><pageno>.tif <document basename><pageno>.txt If the document is an image capture (e.g., JPG), the image is OCR using Tesseract to extract the text content from the page image. The page image and corresponding page text are stored separately in the storage path with the following naming convention: <document basename><pageno>.<suffix> , where <suffix> is png or jpg <document basename><pageno>.txt","title":"2.3 OCR"},{"location":"quick-start-guide/#24-image-resolution-for-ocr","text":"The resolution of the image rendered by Ghostscript from a scanned PDF page will affect the OCR quality and processing time. By default the resolution is set to 300. The resolution can be set for a (or all) documents with the static member RESOLUTION of the Document class. This property only affects the rendering of scanned PDF; it does not affect TIFF facsimile or image capture. # Set the Resolution of Image Extraction of all scanned PDF pages Document.RESOLUTION = 150 # Image Extraction and OCR will be done at 150 dpi for all subsequent documents document = Document(\"scanneddocument.pdf\", \"storage_path\")","title":"2.4 Image Resolution for OCR"},{"location":"quick-start-guide/#25-page-access","text":"Each page is represented by a Page (class) object. Access to the page object is obtained from the pages property member of the Document object. The number of pages in the document is returned by the len() builtin operator for the Document class. document = Document(\"yourdocument.pdf\", \"storage_path\") # Get the number of pages in the PDF document npages = len(document) # Get the page table pages = document.pages # Get the first page page1 = pages[0] # or alternately page1 = document[0] # full path location of the PDF/TIFF or image capture page in storage page1_path = page1.path","title":"2.5 Page Access"},{"location":"quick-start-guide/#26-adding-pages","text":"Additional pages can be added to the end of an existing Document object using the += (overridden) operator, where the new page will be fully processed. document = Document(\"1page.pdf\") # This will print 1 for 1 page print(len(document)) # Create a Page object for an existing PDF page new_page = Page(\"page_to_add.pdf\") # Add the page to the end of the document. document += new_page # This will print 2 showing now that it is a 2 page document. print(len(document))","title":"2.6 Adding Pages"},{"location":"quick-start-guide/#27-text-extraction","text":"The raw text for the page is obtained by the text property of the page class. The byte size of the raw text is obtained from the size() method of the Page class. # Get the page table pages = document.pages # Get the first page page1 = pages[0] # Get the total byte size of the raw text bytes = page1.size() # Get the raw text for the page text = page1.text The property scanned is set to True if the text was extracted using OCR; otherwise it is false (i.e., origin was digital text). The property additionally returns a second value which is the estimated quality of the scan as a percentage (between 0 and 1). # Determine if text extraction was obtained by OCR scanned, quality = document.scanned","title":"2.7 Text Extraction"},{"location":"quick-start-guide/#28-asynchronous-processing","text":"To enhance concurrent execution between a main thread and worker activities, the Document class supports asynchronous processing of the document (i.e., Page Splitting, OCR and Text Extraction). Asynchronous processing will occur if the optional parameter ehandler is set when instantiating the Document object. Upon completion of the processing, the ehandler is called, where the Document object is passed as a parameter. def done(d): \"\"\" Event Handler for when processing of document is completed \"\"\" print(\"DONE\", d.document) # Process the document asynchronously document = Document(\"yourdocument.pdf\", \"storage_path\", ehandler=done)","title":"2.8 Asynchronous Processing"},{"location":"quick-start-guide/#29-nlp-preprocessing-of-the-text","text":"NLP preprocessing of the text requires the SYNTAX module. The processing of the raw text into NLP sequenced tokens (syntax) is deferred and is executed in a JIT (Just in Time) principle. If installed, the NLP sequenced tokens are access through the words property of the Page class. The first time the property is accessed for a page, the raw text is preprocessed, and then retained in memory for subsequent access. # Get the page table pages = document.pages # Get the first page page1 = pages[0] # Get the NLP preprocessed text words = page1.words The NLP preprocessed text is stored separately in the storage path with the following naming convention: <document basename><pageno>.json","title":"2.9 NLP Preprocessing of the Text"},{"location":"quick-start-guide/#210-nlp-preprocessing-settings-config","text":"NLP Preprocessing of the text may be configured for several settings when instantiating a Document object with the optional config parameter, which consists of a list of one or more predefined options. document = Document(\"yourdocument.pdf\", \"storage_path\", config=[options]) # options: bare # do bare tokenization stem = internal | # use builtin stemmer porter | # use NLTK Porter stemmer snowball | # use NLTK Snowball stemmer lancaster | # use NLTK Lancaster stemmer lemma | # use NLTK WordNet lemmatizer nostem # no stemming pos # Tag each word with NLTK parts of speech roman # Romanize latin-1 character encodings into ASCII","title":"2.10 NLP Preprocessing Settings (Config)"},{"location":"quick-start-guide/#211-document-reloading","text":"Once a Document object has been stored, it can later be retrieved from storage, reconstructing the Page and corresponding Words objects. A document object is first instantiated, and then the load() method is called specifying the document name and corresponding storage path. The document name and storage path are used to identify and locate the corresponding stored pages. # Instantiate a Document object document = Document() # Reload the document's pages from storage document.load( \"mydoc.pdf\", \"mystorage\" ) This will reload pages whose filenames in the storage match the sequence: mystorage/mydoc1.json mystorage/mydoc2.json ...","title":"2.11 Document Reloading"},{"location":"quick-start-guide/#212-word-frequency-distributions","text":"The distribution of word occurrences and percentage in a document and individual pages are obtained using the properties: bagOfWords , freqDist , and termFreq . The bagOfWords property returns an unordered dictionary of each unique word in the document (or page) as a key, and the number of occurrences as the value. # Get the bag of words for the document bow = document.bagOfWords print(bow) will output: { '<word>': <no. of occurrences>, '<word>': <no. of occurrences>, \u2026 } e.g., { 'plan': 20, 'medical': 31, 'doctor': 2, \u2026 } # Get the bag of words for each page in the document for page in document.pages: bow = page.bagOfWords The freqDist property returns a sorted list of each unique word in the document (or page), as a tuple of the word and number of occurrences, sorted by the number of occurrences in descending order. # Get the word frequency (count) distribution for the document count = document.freqDist print(count) will output: [ ('<word>', <no. of occurrences>), ('<word>': <no. of occurrences>), \u2026 ] e.g., [ ('medical', 31), ('plan', 20), \u2026, ('doctor', 2), \u2026 ] # Get the word frequency distribution for each page in the document for page in document.pages: count = page.freqDist The termFreq property returns a sorted list of each unique word in the document (or page), as a tuple of the word and the percentage it occurs in the document, sorted by the percentage in descending order. # Get the term frequency (TF) distribution for the document tf = document.freqDist print(tf) will output: [ ('<word>', <percent>), ('<word>': <percent>), \u2026 ] e.g., [ ('medical', 0.02), ('plan', 0.015), \u2026 ]","title":"2.12 Word Frequency Distributions"},{"location":"quick-start-guide/#213-document-and-page-classification","text":"Semantic Classification (e.g., category) of the document and individual pages requires the CLASSIFICATION module. The classification is deferred and is executed in a JIT (Just in Time) principle. If installed, the classification is access through the classification property of the document and page classes, respectively. The first time the property is accessed for a document or page, the NLP sequenced tokens for each page are processed for classification of the content of individual pages and the first page is further processed for the classification of the content of the entire document. # Get the classification for the document document_classification = document.label # Get the classification for each page for gapml.page in document.pages: classification = page.label","title":"2.13 Document and Page Classification"},{"location":"quick-start-guide/#3-syntax-module","text":"","title":"3 SYNTAX Module"},{"location":"quick-start-guide/#31-nlp-processing","text":"The Words (class) object does the NLP preprocessing of the extracted (raw) text. If the extracted text is from a Page object (see SPLITTER ), the NLP preprocessing occurs the first time the words property of the Page object is accessed. from gapml.syntax import Words, Vocabulary # Get the first page in the document page = document.pages[0] # Get the raw text from the page as a string text = page.text # Get the NLP processed words (Words class) object from the page as a list. words = page.words # Print the object type of words => <class 'Document.Words'> type(words)","title":"3.1 NLP Processing"},{"location":"quick-start-guide/#32-words-properties","text":"The Words (class) object has four public properties: text , words , bagOfWords , and freqDist . The text property is used to access the raw text and the words property is used to access the NLP processed tokens from the raw text. # Get the NLP processed words (Words class) object from the page as a list. words = page.words # Get the original (raw) text as a string text = words.text The words property is used to access NLP preprocessed list of words. # Get the NLP processed words from the original text as a Python list. words = words.words # Print the object type of words => <class 'list'> type(words) The bagOfWords and freqDist properties are explained later in the guide.","title":"3.2 Words Properties"},{"location":"quick-start-guide/#33-vocabulary-dictionary","text":"The words property returns a sequenced Python list of words as a dictionary from the Vocabulary class. Each word in the list is of the dictionary format: { 'word' : word, # The stemmed version of the word 'lemma' : word, # The lemma version of the word 'tag' : tag # The word classification }","title":"3.3 Vocabulary Dictionary"},{"location":"quick-start-guide/#34-traversing-the-nlp-processed-words","text":"The NLP processed words returned from the words property are sequenced in the same order as the original text. All punctuation is removed, and except for detected Acronyms, all remaining words are lowercased. The sequenced list of words may be a subset of the original words, depending on the stopwords properties and may be stemmed, lemma, or replaced. # Get the NLP processed words from the original text as a Python list. words = words.words # Traverse the sequenced list of NLP processed words for word in words: text = word.word # original or replaced version of the word tag = word.tag # syntactical classification of the word lemma = word.lemma # The lemma version of the word","title":"3.4 Traversing the NLP Processed Words"},{"location":"quick-start-guide/#35-stopwords","text":"The properties which determine which words are removed, stemmed, lemmatized, or replaced are set as keyword parameters in the constructor for the Words class. If no keyword parameters are specified, then all stopwords are removed after being stemmed/lemmatized. The list of stopwords is a superset of the Porter list and additionally includes removing additionally syntactical constructs such as numbers, dates, etc. For a complete list, see the reference manual. If the keyword parameter stopwords is set to False , then all word removal is disabled, while stemming/lemmatization/reducing are still enabled, along with the removal of punctuation. Note in the example below, while stopwords is disabled, the word jumping is replaced with its stem jump. # No stopword removal words = Words(\"The lazy brown fox jumped over the fence.\", stopwords=False) # words => \"the\", \"lazy\", \"brown\", \"fox\", \"jump\", \"over\", \"the\", \"fence\" # All stopword removal words = Words(\"The lazy brown fox jumped over the fence.\", stopwords=True) # words => \"lazy\", \"brown\", \"fox\", \"jump\", \"fence\"","title":"3.5 Stopwords"},{"location":"quick-start-guide/#36-bare","text":"When the keyword parameter bare is True , all stopword removal, stemming/lemmatization/reducing and punctuation removal are disabled. # Bare Mode words = Words(\"The lazy brown fox jumped over the fence.\", bare=False) # words => \"the\", \"lazy\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"fence\", \".\"","title":"3.6 Bare"},{"location":"quick-start-guide/#37-numbers","text":"When the keyword parameter number is True , text and numeric version of numbers are preserved; otherwise they are removed. Numbers which are text based (e.g., one) are converted to their numeric representation (e.g., one => 1). The tag value for numbers is set to Vocabulary.NUMBER . # keep/replace numbers words = Words(\"one twenty-one 33.7 1/4\", number=True) print(words.words) will output: [ { 'word': '1', tag: Vocabulary.NUMBER }, { 'word': '21', tag: Vocabulary.NUMBER }, { 'word': '33.7', tag: tag: Vocabulary.NUMBER }, { 'word': '0.25', tag: tag: Vocabulary.NUMBER }, ] If a number is followed by a text representation of a multiplier unit (i.e., million), the number and multiplier unit are replaced by the multiplied value. words = Words(\"two million\", number=True) print(words.words) will output: [ { 'word': '2000000', tag: Vocabulary.NUMBER}, ]","title":"3.7 Numbers"},{"location":"quick-start-guide/#38-unit-of-measurement","text":"When the keyword parameter unit is True , US Standard and Metric units of measurement are preserved; otherwise they are removed. Both US and EU spelling of metric units are recognized (e.g., meter/metre, liter/litre). The tag value for units of measurement is set to Vocabulary.UNIT . # keep/replace unit words = Words(\"10 liters\", number=True, unit=True) print(words.words) will output: [ { 'word': '10', tag: Vocabulary.NUMBER }, { 'word': 'liter', tag: Vocabulary.UNIT }, ]","title":"3.8 Unit of Measurement"},{"location":"quick-start-guide/#39-standard-vs-metric","text":"When the keyword parameter standard is True , Metric units of measurement are converted to US Standard. When the keyword parameter metric is True , Standard units of measurement are converted to Metric Standard. # keep/replace unit words = Words(\"10 liters\", number=True, unit=True standard=True) print(words.words) will output: [ { 'word': '2.64172', tag: Vocabulary.NUMBER }, { 'word': 'gallon', tag: Vocabulary.UNIT }, ]","title":"3.9 Standard vs. Metric"},{"location":"quick-start-guide/#310-date","text":"When the keyword parameter date is True , USA and ISO standard date representation and text representation of dates are preserved; otherwise they are removed. Dates are converted to the ISO standard and the tag value is set to Vocabulary.DATE . # keep/replace dates words = Words(\"Jan 2, 2017 and 01/02/2017\", date=True) print(words.words) will output: [ { 'word': '2017-01-02', tag: Vocabulary.DATE }, { 'word': '2017-01-02', tag: Vocabulary.DATE }, ]","title":"3.10 Date"},{"location":"quick-start-guide/#311-date-of-birth","text":"When the keyword parameter dob is True , date of births are preserved; otherwise they are removed. Date of births are converted to the ISO standard and the tag value is set to Vocabulary.DOB . # keep/replace dates words = Words(\"Date of Birth: Jan. 2 2017 DOB: 01-02-2017\", dob=True) print(words.words) will output: [ { 'word': '2017-01-02', tag: Vocabulary.DOB }, { 'word': '2017-01-02', tag: Vocabulary.DOB }, ] If dat e is set to True without dob (date of birth) set to True , date of births will be removed while other dates will be preserved.","title":"3.11 Date of Birth"},{"location":"quick-start-guide/#312-social-security-number","text":"When the keyword parameter ssn is True , USA Social Security numbers are preserved; otherwise they are removed. Social Security numbers are detected from the prefix presence of text sequences indicating a Social Security number will follow, such as SSN, Soc. Sec., Social Security, etc. Social Security numbers are converted to their single 9 digit value and the tag value is set to Vocabulary.SSN . # keep/replace dates words = Words(\"SSN: 12-123-1234 Social Security 12 123 1234\", ssn=True) print(words.words) will output: [ { 'word': '121231234', tag: Vocabulary.SSN }, { 'word': '121231234', tag: Vocabulary.SSN }, ]","title":"3.12 Social Security Number"},{"location":"quick-start-guide/#313-telephone-number","text":"When the keyword parameter telephone is True , USA/CA telephone numbers are preserved; otherwise they are removed. Telephone numbers are detected from the prefix presence of text sequences indicating a telephone number will follow, such Phone:, Mobile Number, etc. Telephone numbers are converted to their single 10 digit value, inclusive of area code, and the tag value is set to one of: Vocabulary.TELEPHONE Vocabulary.TELEPHONE_HOME Vocabulary.TELEPHONE_WORK Vocabulary.TELEPHONE_OFFICE Vocabulary.TELEPHONE_FAX # keep/replace dates words = Words(\"Phone: (360) 123-1234, Office Number: 360-123-1234\", telephone=True) print(words.words) will output: [ { 'word': '3601231234', tag: Vocabulary.TELEPHONE }, { 'word': '3601231234', tag: Vocabulary.TELEPHONE_WORK}, ]","title":"3.13 Telephone Number"},{"location":"quick-start-guide/#314-address","text":"When the keyword parameter address is True , USA/CA street and postal addresses are preserved; otherwise they are removed. Each component in the address is tagged according to the above street/postal address component type, as follows: Postal Box (Vocabulary.POB) Street Number (Vocabuary.STREET_NUM) Street Direction (Vocabuary.STREET_DIR) Street Name (Vocabuary.STREET_NAME) Street Type (Vocabuary.STREET_TYPE) Secondary Address (Vocabuary.STREET_ADDR2) City (Vocabulary.CITY) State (Vocabulary.STATE) Postal (Vocabulary.POSTAL) # keep/replace street addresses words = Words(\"12 S.E. Main Ave, Seattle, WA\", gender=True) print(words.words) will output: [ { 'word': '12', tag: Vocabulary.STREET_NUM }, { 'word': 'southeast', tag: Vocabulary.STREET_DIR }, { 'word': 'main', tag: Vocabulary.STREET_NAME }, { 'word': 'avenue', tag: Vocabulary.STREET_TYPE }, { 'word': 'seattle', tag: Vocabulary.CITY }, { 'word': 'ISO316-2:US-WA', tag: Vocabulary.STATE }, ]","title":"3.14 Address"},{"location":"quick-start-guide/#315-gender","text":"When the keyword parameter gender is True , words indicating gender are preserved; otherwise they are removed. Transgender is inclusive in the recognition. The tag value is set to one of Vocabulary.MALE , Vocabulary.FEMALE or Vocabulary.TRANSGENDER . # keep/replace gender indicating words words = Words(\"man uncle mother women tg\", gender=True) print(words.words) will output: [ { 'word': 'man', tag: Vocabulary.MALE }, { 'word': 'uncle', tag: Vocabulary.MALE }, { 'word': 'mother', tag: Vocabulary.FEMALE }, { 'word': 'women', tag: Vocabulary.FEMALE }, { 'word': 'transgender', tag: Vocabulary.TRANSGENDER }, ]","title":"3.15 Gender"},{"location":"quick-start-guide/#316-sentiment","text":"When the keyword parameter sentiment is True, word and word phrases indicating sentiment are preserved; otherwise they are removed. Sentiment phrases are reduced to the single primary word indicating the sentiment and the tag value is set to either Vocabulary.POSITIVE or Vocabulary.NEGATIVE . # keep/replace sentiment indicating phrases words = Words(\"the food was not good\", sentiment=True) print(words.words) will output: [ { 'word': 'food', tag: Vocabulary.UNTAG }, { 'word': 'not', tag: Vocabulary.NEGATIVE}, ]","title":"3.16 Sentiment"},{"location":"quick-start-guide/#317-spell-checking","text":"When the keyword parameter spell is set to one of 'en', 'es', 'fr', 'de', or 'it', each tokenized word is looked up in the builtin Norvig speller for the corresponding language (e.g., en = English). If the word is not found (presumed misspelled) and the Norvig recommends a replacement, the word is replaced with the Norvig replacement. The spell check/replacement occurs prior to stemming, lemmatizing, and stopword removal. # add parts of speech tagging words = Words(\"mispelled\", spell='en') print(words.words) will output: [ { 'word': 'misspell', 'tag': Vocabulary.UNTAG}, ]","title":"3.17 Spell Checking"},{"location":"quick-start-guide/#318-parts-of-speech","text":"When the keyword parameter pos is True , each tokenized word is further annotated with it's corresponding NLTK parts of speech tag. # add parts of speech tagging words = Words(\"Jim Smith\", pos=True) print(words.words) will output: [ { 'word': 'food', 'tag': Vocabulary.UNTAG, 'pos': NN }, { 'word': 'not', 'tag': Vocabulary.NEGATIVE, 'pos': NN }, ]","title":"3.18 Parts of Speech"},{"location":"quick-start-guide/#319-romanization","text":"When the keyword parameter roman is True , the latin-1 character encoding of each tokenized is converted to ASCII. # Romanization of latin-1 character encodings words = Words(\"Qu\u00e9bec\", roman=True) print(words.words) will output: [ { 'word': 'quebec', 'tag': Vocabulary.UNTAG, ]","title":"3.19 Romanization"},{"location":"quick-start-guide/#320-bag-of-words-and-word-frequency-distribution","text":"The property bagsOfWords returns an unordered dictionary of each occurrence of a unique word in the tokenized sequence, where the word is the dictionary key, and the number of occurrences is the corresponding value. # Get the Bag of Words representation words = Words(\"Jack and Jill went up the hill to fetch a pail of water. Jack fell down and broke his crown and Jill came tumbling after.\", stopwords=True) print(words.bagOfWords) will output: { 'pail': 1, 'the': 1, 'a': 1, 'water': 1, 'fetch': 1, 'went': 1, 'and': 2, 'jack': 2, 'jill': 2, 'down': 1, 'come': 1, 'fell': 1, 'up': 1, 'of': 1, 'tumble': 1, 'to': 1, 'hill': 1, 'after': 1 } The property freqDist returns a sorted list of tuples, in descending order, of word frequencies (i.e., the number of occurrences of the word in the tokenized sequence. # Get the Word Frequency Distribution words = Words(\"Jack and Jill went up the hill to fetch a pail of water. Jack fell down and broke his crown and Jill came tumbling after.\", stopwords=True) print(words.freqDist) will output: [ ('jack', 2), ('jill', 2), ('and', 2), ('water', 1), ('the', 1), \u2026 ]","title":"3.20 Bag of Words and Word Frequency Distribution"},{"location":"quick-start-guide/#4-segmentation-module","text":"The segmentation module is newly introduced in Gap v0.9 prelaunch. It is in the early stage, and should be considered experimental, and not for commercial-product-ready yet. The segmentation module analyzes the whitespace layout of the text to identify the 'human' perceived grouping/purpose of text, such as paragraphs, headings, columns, page numbering, letterhead, etc., and the associated context. In this mode, the text is separated into segments, corresponding to identified layout, where each segment is then NLP preprocessed. The resulting NLP output is then hierarchical, where at the top level is the segment identification, and it's child is the NLP preprocessed text.","title":"4 SEGMENTATION Module"},{"location":"quick-start-guide/#41-text-segmentation","text":"When the config option 'segment' is specified on a Document object, the corresponding text per page is segmented. # import the segmentation module from gapml.segment import Segment segment = Segment(\"para 1\\n\\npara 2\") print(segment.segments) will output: [ { 'tag': 1002, words: [ { 'word': 'para', 'tag': 0}, {'word': 1, 'tag': 1}]}, { 'tag': 1002, words: [ { 'word': 'para', 'tag': 0}, {'word': 2, 'tag': 1}]} ] Proprietary Information Copyright \u00a92018, Epipog, All Rights Reserved","title":"4.1 Text Segmentation"},{"location":"specs/segmentation_spec/","text":"Gap Framework - Natural Language Processing for PDF/TIFF/Image Documents SEGMENTATION MODULE High Precision Document Segmentation Technical Specification, Gap v0.9.2 1 Segment 1.1 Segment Overview The segment NLP preprocessor contains the following primary classes, and their relationships: Segment - This is the base class for the representation of a Natural Language Processed text segmented into human perceived text layout, such as headings, paragraphs, table columns, etc. The constructor takes as a parameter a text to segment. segments = Segment(text) Fig. 1a High Level view of Segment Class Object Relationships \u2003 1.2 Segment Initializer (Constructor) Synopsis Segment(text=None) Parameters text: A Unicode text string. Usage When specified without parameters, an empty Segments object is created. Otherwise, the text sequence is analyzed for region detection based on whitespace surrounding the text. Regions include: Headings Paragraphs Page Numbering Exceptions A TypeError is raised if the type of the parameter is not the expected type. 1.3 Segment Properties 1.3.1 segments Synopsis # Getter segments = segment.segments Usage When used as a getter the property returns REWRITE IN PROGRESS . 1.4 Segment Overridden Operators 1.4.1 len() Synopsis nsegments = len(segment) Usage The len() (__len__) operator is overridden to return the number of Image objects in the collection. 1.4.1 [] Synopsis image = images[n] Usage The [] (__getitem__) operator is overridden to return the segment at the specified index. Exceptions A IndexError is raised if the index is out of range. 1.5 Segment Private Methods The segment class contains the following private methods: _segmentation() \u2013 This method is called by the constructor. It parses the text to identify text layouts, such as headings, paragraphs, columns, page numbering, etc, and separates the text into segments according to the identified layout. 1.6 Segment Public Methods The Segment class contains of following public methods: There are no public methods. APPENDIX I: Updates Pre-Gap (Epipog) v1.4 + An initial prototype was built Gap v0.91 (alpha) + Rewrite of Specification APPENDIX II: Anticipated Engineering The following has been identified as enhancement/issues to be addressed in subsequent update: Add support for splitting dual column pages. Proprietary Information Copyright \u00a92018, Epipog, All Rights Reserved","title":"Segmentation"},{"location":"specs/segmentation_spec/#gap-framework-natural-language-processing-for-pdftiffimage-documents","text":"","title":"Gap Framework - Natural Language Processing for PDF/TIFF/Image Documents"},{"location":"specs/segmentation_spec/#segmentation-module","text":"High Precision Document Segmentation Technical Specification, Gap v0.9.2","title":"SEGMENTATION MODULE"},{"location":"specs/segmentation_spec/#1-segment","text":"","title":"1 Segment"},{"location":"specs/segmentation_spec/#11-segment-overview","text":"The segment NLP preprocessor contains the following primary classes, and their relationships: Segment - This is the base class for the representation of a Natural Language Processed text segmented into human perceived text layout, such as headings, paragraphs, table columns, etc. The constructor takes as a parameter a text to segment. segments = Segment(text) Fig. 1a High Level view of Segment Class Object Relationships","title":"1.1 Segment Overview"},{"location":"specs/segmentation_spec/#12-segment-initializer-constructor","text":"Synopsis Segment(text=None) Parameters text: A Unicode text string. Usage When specified without parameters, an empty Segments object is created. Otherwise, the text sequence is analyzed for region detection based on whitespace surrounding the text. Regions include: Headings Paragraphs Page Numbering Exceptions A TypeError is raised if the type of the parameter is not the expected type.","title":"1.2 Segment Initializer (Constructor)"},{"location":"specs/segmentation_spec/#13-segment-properties","text":"","title":"1.3 Segment Properties"},{"location":"specs/segmentation_spec/#131-segments","text":"Synopsis # Getter segments = segment.segments Usage When used as a getter the property returns REWRITE IN PROGRESS .","title":"1.3.1 segments"},{"location":"specs/segmentation_spec/#14-segment-overridden-operators","text":"","title":"1.4 Segment Overridden Operators"},{"location":"specs/segmentation_spec/#141-len","text":"Synopsis nsegments = len(segment) Usage The len() (__len__) operator is overridden to return the number of Image objects in the collection.","title":"1.4.1 len()"},{"location":"specs/segmentation_spec/#141","text":"Synopsis image = images[n] Usage The [] (__getitem__) operator is overridden to return the segment at the specified index. Exceptions A IndexError is raised if the index is out of range.","title":"1.4.1 []"},{"location":"specs/segmentation_spec/#15-segment-private-methods","text":"The segment class contains the following private methods: _segmentation() \u2013 This method is called by the constructor. It parses the text to identify text layouts, such as headings, paragraphs, columns, page numbering, etc, and separates the text into segments according to the identified layout.","title":"1.5 Segment Private Methods"},{"location":"specs/segmentation_spec/#16-segment-public-methods","text":"The Segment class contains of following public methods: There are no public methods.","title":"1.6 Segment Public Methods"},{"location":"specs/segmentation_spec/#appendix-i-updates","text":"Pre-Gap (Epipog) v1.4 + An initial prototype was built Gap v0.91 (alpha) + Rewrite of Specification","title":"APPENDIX I: Updates"},{"location":"specs/segmentation_spec/#appendix-ii-anticipated-engineering","text":"The following has been identified as enhancement/issues to be addressed in subsequent update: Add support for splitting dual column pages. Proprietary Information Copyright \u00a92018, Epipog, All Rights Reserved","title":"APPENDIX II: Anticipated Engineering"},{"location":"specs/splitter_spec/","text":"Gap Framework - Natural Language Processing for PDF/TIFF/Image Documents SPLITTER Module High Precision PDF Page Splitting/OCR/Text Extraction Technical Specification, Gap v0.9.2 1 Document 1.1 Document Overview The document classifier contains the following primary classes, and their relationships: Document \u2013 This is the base class for the representation of a stored document. The constructor for the class object takes as parameters the stored path to the document, optionally a directory path for storing extracted pages and text, and optionally an event completion handler when processing the document asynchronously, and optionally a config parameter for configuring the NLP preprocessing. document = Document(\u201c/somedir/mydocument.pdf\u201d, \u201c/mypages/mydocument\u201d) The constructors calls the _exists() and _collate() private methods for the specified document. Page \u2013 This is a base class for the representation of an extracted page from the document. The Document class contains a list (index) of the extracted pages as Page objects. Fig. 1a High Level view of Document Class Object Relationships 1.2 Initializer (Constructor) Synopsis Document( document=None, dir=\u2019./\u2019, ehandler=None, config=None) Parameters document: If not None, a string that is either: 1. local path to document 2. remote path to document ((i.e., http[s]://\u2026) The document must be one of the following types: PDF. JPG, PNG, BMP or TIF dir: The directory where to store the machine learning ready data. ehandler: If not None, the processing of the images into machine learning ready data will be asynchronous, and the value of the parameter is the function (or method) that is the event handler when processing is complete. The event handler takes the form: def myHandler(images): # where images is the Images object that was preprocessed. config: If not None, a list of one or more configuration settings as strings: bare pos roman segment stem=gap|porter|Lancaster|snowball|lemma Usage When specified with no parameters, an empty Document object is created. The Document object may then be used to subsequent load (retrieve) previously stored preprocessed machine learning ready data (see load() ). Otherwise, the document parameter must be specified. The document specified by the document parameter will be preprocessed according to the optional parameters and configuration settings. By default, the document will be preprocessed as follows: The document will be split into individual pages. A Page object will be created for each page. If the document (or page) is an image (e.g., scanned PDF), it will be OCR\u2019d. The digital text will be extracted from each page and stored in the Page object. The text will be optionally segmented into regions if the configuration setting segment is specified. The text from each page object will be preprocessed into machine learning ready data (see syntax module specification), according to the optional parameters and configuration settings. If the document was a scanned or image document, the quality of the scan will be estimated, unless Document.SCANCHECK is set to zero. The machine learning ready data will be stored on a per page basis in the directory specified by the parameter dir. The following files are created and stored: <document><pageno>.<suffix> <document><pageno>.txt <document>.<pageno>.json The <document> is the root name of the document, and <pageno> is the corresponding page number starting at page 1. The file ending in the original file suffix <suffix> is the split page. The file ending in the file suffix .txt is the extracted text. The file ending in the file suffix .json is the NLP preprocessed machine learning data stored in a JSON format. If the ehandler parameter is not None, then the above will occur asynchronously, and when completed, the corresponding event handler will be called with the Document object passed as a parameter. If the path to the document file is remote (i.e., starts with http), an HTTP request will be made to fetch the contents of the file from the remote location. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A AttributeError is raised if an invalid configuration setting is specified. A FileNotFoundError is raised if the document file does not exist. A IOError is raised if an error occurs reading in the document file. 1.3 Document Properties 1.3.1 document Synopsis # Getter path = document.document # Setter document.document = path Usage When used as a getter the property returns the path to the document file. When used as a setter the property specifies the path of the document file to preprocess into machine learning ready data (see initializer ). Exceptions A TypeError is raised if the type of the parameter is not the expected type. A FileNotFoundError is raised if the document file does not exist. A IOError is raised if an error occurs reading in the document file. 1.3.2 name Synopsis # Getter root = document.name Usage When used as a getter the property returns the root name of the document file (e.g., /mydir/mydocument.pdf -> mydocument). 1.3.3 type Synopsis # Getter suffix = document.type Usage When used as a getter the property returns the file suffix of the document file (e.g., pdf). 1.3.4 size Synopsis # Getter size = document.size Usage When used as a getter the property returns the file size of the document file in bytes. 1.3.5 dir Synopsis # Getter subfolder = document.dir # Setter document.dir = subfolder Usage When used as a getter the property returns the directory path where the corresponding files of the associated page objects are stored. When used as a setter, it is only applicable when used in conjunction with the load() method, indicating where the path where the files associated with the page objects are stored. Otherwise, it is ignored. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A FileNotFoundError is raised if the directory does not exist. 1.3.6 label Synopsis # Getter label = document.label # Setter document.label = label Usage When used as a getter the property returns the integer label specified for the document. When used as a setter the property sets the label of the document to the specified integer value. Exceptions A TypeError is raised if the type of the parameter is not the expected type. 1.3.7 lang Synopsis # Getter lang = document.lang Usage When used as a getter the property returns whether the language of the document, which may be either 'en' (English), 'es' (Spanish) or 'fr' (French). 1.3.8 scanned Synopsis # Getter scanned, quality = document.scanned Usage When used as a getter the property returns whether the document is a scanned image True or digital text False document, and the estimated quality of the scan as a percentage (between 0 and 1). 1.3.9 time Synopsis # Getter secs = document.time Usage When used as a getter the property returns the amount of time (in seconds) it took to preprocess the document into machine learning ready data. 1.3.10 text Synopsis # Getter text = document.text Usage When used as a getter the property returns a list, one entry per page, of the extracted text from the document in its original Unicode format. 1.3.11 pages Synopsis # Getter pages = document.pages 1.3.12 bagOfWords Synopsis # Getter bag = document.bagOfWords Usage When used as a getter the property returns the document\u2019s word sequences as a Bag of Words, represented as an unordered dictionary, where the key is the word and the value is the number of occurrences: { \u2018<word\u2019> : <no. of occurrences>, \u2026 } 1.3.13 freqDist Synopsis # Getter freq = document.freqDist Usage When used as a getter the property returns the sorted tuples of a frequency distribution of words (from bag of words), in descending order (i.e., highest first) [ ( \u2018<word\u2019>: <no. of occurrences> ), \u2026 ] 1.3.14 termFreq Synopsis # Getter tf = document.termFreq Usage When used as a getter the property returns the sorted tuples of a term frequency distribution (percent that term occurs), in descending order (i.e., highest first) [ ( \u2018<word\u2019>: <percentage of occurrences> ), \u2026. ] 1.3.15 Static Variables The Document class contains the following static variables: RESOLUTION \u2013 The image resolution when converting PDF to PNG for OCR (default 300 ). SCANCHECK \u2013 The number of OCR words to check to estimate the quality of the scan. WORDDICT - The word dictionary to use for scan spell check (default to norvig ). 1.4 Document Overridden Operators 1.4.1 len() Synopsis npages = len(document) Usage The len() (__len__) operator is overridden to return the number of pages in the document. 1.4.2 += Synopsis document += page Usage The += (__iadd__) method is overridden to append a Page object to the document. 1.4.3 [] Synopsis page= documents[n] document[n] = page Usage The [] (__getitem__) operator is overridden to return the Page object at the specified index. The __setitem__() method is overridden to replace the Page object at the specified index (i.e., page number \u2013 1). Exceptions A IndexError is raised if the index is out of range. 1.4.4 str() Synopsis label = str(image) Usage The str() (__str__) operator is overridden to return the label of the document as a string. 1.5 Document Public Methods 1.5.1 load() Synopsis document.load(name, dir=None) Parameters name: The name of the document. Usage This method will load into memory a preprocessed machine learning ready data from the corresponding JSON files specified by the document (root) name. The method will load the JSON files by the filename <name><pageno>.json . If dir is None , then it will look for the files where the current value for dir is defined (either locally or reset by the dir property). Otherwise, it will look for the files under the directory specified by the dir parameter. Once loaded, the Document object will have the same characteristics as when the Document object was created. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A ValueError is raised if the name parameter is None . 1.6 Document Private Methods The Document class contains the following private methods: _exists() \u2013 This method checks if the document exists at the specified stored path. If not, a FileNotFound exception is thrown. _collate() \u2013 This method performs the collation task, which includes: Determines the number of pages in the document. Splits the document into individual pages, where each page is individually stored in the same format as the document. The pages are named as follows: <name><pageno>.<suffix> Each page is stored in the subdirectory specified by the property dir. If dir is None, then the page is stored in the same directory where program is ran; otherwise, if the subdirectory does not exist, it is created. If the page is a scanned PDF page, the scanned image is extracted and saved as a PNG image. The PNG image is then OCR\u2019d to convert to text. <name><pageno>.png If the page is a TIFF facsimile, the TIFF image is then OCR\u2019d to convert to text. <name><pageno>.tif If the page is an image capture (e.g. camera capture), the captured image (e.g., JPG) is then OCR\u2019d to convert to text. <name><pageno>.jpg Extracts the raw text from the page , where each page is individually stored in a raw text format. The pages are named as follows: <name><pageno>.txt Each page is stored in the subdirectory specified by the property dir. If dir is None, then the page is stored in the same directory where program is ran. Create a Page object for each page and adds them to the pages index property. If the document format is raw text, then: Treats as a single page. Stores only a single page text file. If the document format is PDF, then page splitting and extraction of the raw text per page is done with the open source version of Ghostscript. If the document is a scanned PDF, the image is extracted and converted to PNG using Ghostscript and then OCR\u2019d using open source Tesseract. If the document format is TIFF, then page splitting is done with the open source Magick and then OCR\u2019d using open source Tesseract. _langcheck() \u2013 This method is called after NLP preprocessing of the document has been completed. The method will sample upto ten words to probabilistically determine the language of the document. The detected languages are English, French, German, Italian, and Spanish. _scancheck() \u2013 This method is called after NLP preprocessing of the document has been completed, and the document was a scanned image. The method will sample upto SCANCHECK number of words for recognition in the detected language dictionary (i.e., English, French, German, Italian, or Spanish). The method will check the words on either page 1 or page 2, depending on which page has a greater number of words. Punctuation, symbols, acronyms or single letter words are excluded. The method then sets the internal variable _quality to the percentage of the words that were recognized (between 0 and 1). _async() \u2013 This method performs asynchronous processing of the _collate() function, when the optional ehandler parameter to the constructor is not None . When processing is completed, the ehandler parameter value is called as a function to signal completion of the processing, and the document object is passed as a parameter. 2 Page 2.1 Page Overview The page classifier contains the following primary classes, and their relationships: Page \u2013 This is a base class for the representation of an extracted page from a document. The constructor for the class object takes optionally as parameters the stored path to the page, and the extracted raw text. page = Page( \u2018/mypages/page1.pdf\u2019, \u2018some text\u2019) Words \u2013 This is a base class for representation of the text as NLP preprocessed list of words. Fig. 2a High Level view of Page Class Object Relationships 2.2 Page Initializer (Constructor) Synopsis Page( page=None, text=None, pageno=None) Parameters page: If not None, the local path to the page. text: If not None, the text corresponding to the page. pageno: If not None, the page number in the corresponding Document object. Usage If the text parameter is not None, a Words object is created and instantiated with the corresponding text. The text is then NLP preprocessed according to the configuration settings stored as static members in the Page class (i.e., set by the parent Document object): BARE : If True, then the bare configuration setting is passed to the Words object. STEM : If not None, then the stem configuration setting is passed to the Words object. ROMAN : If True, then the roman configuration setting is passed to the Words object. POS : If True, then the pos configuration setting is passed to the Words object. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A FileNotFoundError is raised if the file specified by page parameter does not exist. 2.3 Page Properties 2.3.1 path Synopsis # Getter path = page.path # Setter page.path= path Usage When used as a getter the property returns the path of the corresponding page (i.e., split by Document object) in its native format. When used as a setter the property sets the path of the corresponding split page. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A FileNotFoundError is raised if the file specified by path does not exist. 2.3.2 pageno Synopsis # Getter pageno = page.pageno Usage When used as a getter the property returns the pageno set for the Page object in the corresponding parent Document object. 2.3.3 size Synopsis # Getter nbytes = page.size Usage When used as a getter the property returns the byte size of the text parameter. 2.3.4 label Synopsis # Getter label = page.label # Setter page.label = label Usage When used as a getter the property returns the integer label that has been assigned to the page. When used as a setter the property assigns sets a label to the page. Exceptions A TypeError is raised if the type of the parameter is not the expected type. 2.3.5 words Synopsis # Getter words = page.words Usage When used as a getter the property returns the Words object of the corresponding NLP preprocessed text. 2.3.6 bagOfWords Synopsis # Getter bag = page.bagOfWords Usage When used as a getter the property returns the page\u2019s word sequences as a Bag of Words, represented as an unordered dictionary, where the key is the word and the value is the number of occurrences: { \u2018<word\u2019> : <no. of occurrences>, \u2026 } 2.3.7 freqDist Synopsis # Getter freq = page.freqDist Usage When used as a getter the property returns the sorted tuples of a frequency distribution of words (from bag of words), in descending order (i.e., highest first) [ ( \u2018<word\u2019>: <no. of occurrences> ), \u2026. ] 2.3.8 termFreq Synopsis # Getter tf = page.termFreq Usage When used as a getter the property returns the sorted tuples of a term frequency distribution (percent that term occurs), in descending order (i.e., highest first) [ ( \u2018<word\u2019>: <percentage of occurrences> ), \u2026. ] 2.3.9 Static Variables The Page class contains the following static variables: BARE : If True, then the bare configuration setting is passed to the Words object. STEM : If not None, then the stem configuration setting is passed to the Words object. ROMAN : If True, then the roman configuration setting is passed to the Words object. POS : If True, then the pos configuration setting is passed to the Words object. 2.4 Page Overwritten Operators 2.4.1 len() Synopsis nwords = len(pages) Usage The len() (__len__) operator is overridden to return the number of NLP tokenized words in the page. 2.4.2 += Synopsis page += text Usage The += (__iadd__) method is overridden to append text to the page, which is then NLP preprocessed. Exceptions A TypeError is raised if the type of the parameter is not the expected type. 2.4.3 str() Synopsis label = str(image) Usage The str() (__str__) operator is overridden to return the label of the page as a string. 2.5 Page Private Methods The Page class contains no private methods. \u2003 2.6 Page Public Methods 2.6.1 store() Synopsis image.store(path) Parameters path: the file path to write to. Usage The store() method writes the NLP tokenized sequence as a JSON object to the specified file. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A FileNotFoundError is raised if the file path is invalid. 2.6.2 load() Synopsis image.load(path) Parameters path: the file path to read from. Usage The load() method writes the NLP tokenized sequence as a JSON object from the specified file. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A FileNotFoundError is raised if the file path is invalid. APPENDIX I: Updates Pre-Gap (Epipog) v1.1 1. Added time property. 2. Added scanned property. 3. Added support for TIFF and JPG/PNG. Pre-Gap (Epipog) v1.3 1. Add direct read of PDF resource element to determine if scanned page. 2. Fix not detecting scanned PDF if text extraction produced noise. Pre-Gap (Epipog) v1.4 1. Added pageno property to Page class. 2. Added methods store() and load() to Page class to store/load NLP tokenized words to file. 3. Added method load() to Document class to reload NLP tokenized words from storage. 4. Added config keyword arguent to Document initializer to configure NLP preprocessing. Pre-Gap (Epipog) v1.5 1. Added bagOfWords , freqDist , and termFreq properties to Document and Page class. Gap v0.9.1 (alpha) 1. Rewrote Specification. 2. Add OCR quality estimate. Gap v0.9.2 (alpha) 1. Add language detection for English, Spanish and French. APPENDIX II: Anticipated Engineering The following has been identified as enhancement/issues to be addressed in subsequent update: What does it mean to add text to a document. Break raw text into pages for > 50 lines. Refactor page counting for faster performance. Add page split endpoint for streaming interface and URL. Add more pdf test files. Fix bug of not handling Cryllic characters in page load() method. Proprietary Information Copyright \u00a92018, Epipog, All Rights Reserved","title":"Splitter"},{"location":"specs/splitter_spec/#gap-framework-natural-language-processing-for-pdftiffimage-documents","text":"","title":"Gap Framework - Natural Language Processing for PDF/TIFF/Image Documents"},{"location":"specs/splitter_spec/#splitter-module","text":"High Precision PDF Page Splitting/OCR/Text Extraction Technical Specification, Gap v0.9.2","title":"SPLITTER Module"},{"location":"specs/splitter_spec/#1-document","text":"","title":"1 Document"},{"location":"specs/splitter_spec/#11-document-overview","text":"The document classifier contains the following primary classes, and their relationships: Document \u2013 This is the base class for the representation of a stored document. The constructor for the class object takes as parameters the stored path to the document, optionally a directory path for storing extracted pages and text, and optionally an event completion handler when processing the document asynchronously, and optionally a config parameter for configuring the NLP preprocessing. document = Document(\u201c/somedir/mydocument.pdf\u201d, \u201c/mypages/mydocument\u201d) The constructors calls the _exists() and _collate() private methods for the specified document. Page \u2013 This is a base class for the representation of an extracted page from the document. The Document class contains a list (index) of the extracted pages as Page objects. Fig. 1a High Level view of Document Class Object Relationships","title":"1.1 Document Overview"},{"location":"specs/splitter_spec/#12-initializer-constructor","text":"Synopsis Document( document=None, dir=\u2019./\u2019, ehandler=None, config=None) Parameters document: If not None, a string that is either: 1. local path to document 2. remote path to document ((i.e., http[s]://\u2026) The document must be one of the following types: PDF. JPG, PNG, BMP or TIF dir: The directory where to store the machine learning ready data. ehandler: If not None, the processing of the images into machine learning ready data will be asynchronous, and the value of the parameter is the function (or method) that is the event handler when processing is complete. The event handler takes the form: def myHandler(images): # where images is the Images object that was preprocessed. config: If not None, a list of one or more configuration settings as strings: bare pos roman segment stem=gap|porter|Lancaster|snowball|lemma Usage When specified with no parameters, an empty Document object is created. The Document object may then be used to subsequent load (retrieve) previously stored preprocessed machine learning ready data (see load() ). Otherwise, the document parameter must be specified. The document specified by the document parameter will be preprocessed according to the optional parameters and configuration settings. By default, the document will be preprocessed as follows: The document will be split into individual pages. A Page object will be created for each page. If the document (or page) is an image (e.g., scanned PDF), it will be OCR\u2019d. The digital text will be extracted from each page and stored in the Page object. The text will be optionally segmented into regions if the configuration setting segment is specified. The text from each page object will be preprocessed into machine learning ready data (see syntax module specification), according to the optional parameters and configuration settings. If the document was a scanned or image document, the quality of the scan will be estimated, unless Document.SCANCHECK is set to zero. The machine learning ready data will be stored on a per page basis in the directory specified by the parameter dir. The following files are created and stored: <document><pageno>.<suffix> <document><pageno>.txt <document>.<pageno>.json The <document> is the root name of the document, and <pageno> is the corresponding page number starting at page 1. The file ending in the original file suffix <suffix> is the split page. The file ending in the file suffix .txt is the extracted text. The file ending in the file suffix .json is the NLP preprocessed machine learning data stored in a JSON format. If the ehandler parameter is not None, then the above will occur asynchronously, and when completed, the corresponding event handler will be called with the Document object passed as a parameter. If the path to the document file is remote (i.e., starts with http), an HTTP request will be made to fetch the contents of the file from the remote location. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A AttributeError is raised if an invalid configuration setting is specified. A FileNotFoundError is raised if the document file does not exist. A IOError is raised if an error occurs reading in the document file.","title":"1.2 Initializer (Constructor)"},{"location":"specs/splitter_spec/#13-document-properties","text":"","title":"1.3 Document Properties"},{"location":"specs/splitter_spec/#131-document","text":"Synopsis # Getter path = document.document # Setter document.document = path Usage When used as a getter the property returns the path to the document file. When used as a setter the property specifies the path of the document file to preprocess into machine learning ready data (see initializer ). Exceptions A TypeError is raised if the type of the parameter is not the expected type. A FileNotFoundError is raised if the document file does not exist. A IOError is raised if an error occurs reading in the document file.","title":"1.3.1 document"},{"location":"specs/splitter_spec/#132-name","text":"Synopsis # Getter root = document.name Usage When used as a getter the property returns the root name of the document file (e.g., /mydir/mydocument.pdf -> mydocument).","title":"1.3.2 name"},{"location":"specs/splitter_spec/#133-type","text":"Synopsis # Getter suffix = document.type Usage When used as a getter the property returns the file suffix of the document file (e.g., pdf).","title":"1.3.3 type"},{"location":"specs/splitter_spec/#134-size","text":"Synopsis # Getter size = document.size Usage When used as a getter the property returns the file size of the document file in bytes.","title":"1.3.4 size"},{"location":"specs/splitter_spec/#135-dir","text":"Synopsis # Getter subfolder = document.dir # Setter document.dir = subfolder Usage When used as a getter the property returns the directory path where the corresponding files of the associated page objects are stored. When used as a setter, it is only applicable when used in conjunction with the load() method, indicating where the path where the files associated with the page objects are stored. Otherwise, it is ignored. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A FileNotFoundError is raised if the directory does not exist.","title":"1.3.5 dir"},{"location":"specs/splitter_spec/#136-label","text":"Synopsis # Getter label = document.label # Setter document.label = label Usage When used as a getter the property returns the integer label specified for the document. When used as a setter the property sets the label of the document to the specified integer value. Exceptions A TypeError is raised if the type of the parameter is not the expected type.","title":"1.3.6 label"},{"location":"specs/splitter_spec/#137-lang","text":"Synopsis # Getter lang = document.lang Usage When used as a getter the property returns whether the language of the document, which may be either 'en' (English), 'es' (Spanish) or 'fr' (French).","title":"1.3.7 lang"},{"location":"specs/splitter_spec/#138-scanned","text":"Synopsis # Getter scanned, quality = document.scanned Usage When used as a getter the property returns whether the document is a scanned image True or digital text False document, and the estimated quality of the scan as a percentage (between 0 and 1).","title":"1.3.8 scanned"},{"location":"specs/splitter_spec/#139-time","text":"Synopsis # Getter secs = document.time Usage When used as a getter the property returns the amount of time (in seconds) it took to preprocess the document into machine learning ready data.","title":"1.3.9 time"},{"location":"specs/splitter_spec/#1310-text","text":"Synopsis # Getter text = document.text Usage When used as a getter the property returns a list, one entry per page, of the extracted text from the document in its original Unicode format.","title":"1.3.10 text"},{"location":"specs/splitter_spec/#1311-pages","text":"Synopsis # Getter pages = document.pages","title":"1.3.11 pages"},{"location":"specs/splitter_spec/#1312-bagofwords","text":"Synopsis # Getter bag = document.bagOfWords Usage When used as a getter the property returns the document\u2019s word sequences as a Bag of Words, represented as an unordered dictionary, where the key is the word and the value is the number of occurrences: { \u2018<word\u2019> : <no. of occurrences>, \u2026 }","title":"1.3.12 bagOfWords"},{"location":"specs/splitter_spec/#1313-freqdist","text":"Synopsis # Getter freq = document.freqDist Usage When used as a getter the property returns the sorted tuples of a frequency distribution of words (from bag of words), in descending order (i.e., highest first) [ ( \u2018<word\u2019>: <no. of occurrences> ), \u2026 ]","title":"1.3.13 freqDist"},{"location":"specs/splitter_spec/#1314-termfreq","text":"Synopsis # Getter tf = document.termFreq Usage When used as a getter the property returns the sorted tuples of a term frequency distribution (percent that term occurs), in descending order (i.e., highest first) [ ( \u2018<word\u2019>: <percentage of occurrences> ), \u2026. ]","title":"1.3.14 termFreq"},{"location":"specs/splitter_spec/#1315-static-variables","text":"The Document class contains the following static variables: RESOLUTION \u2013 The image resolution when converting PDF to PNG for OCR (default 300 ). SCANCHECK \u2013 The number of OCR words to check to estimate the quality of the scan. WORDDICT - The word dictionary to use for scan spell check (default to norvig ).","title":"1.3.15 Static Variables"},{"location":"specs/splitter_spec/#14-document-overridden-operators","text":"","title":"1.4 Document Overridden Operators"},{"location":"specs/splitter_spec/#141-len","text":"Synopsis npages = len(document) Usage The len() (__len__) operator is overridden to return the number of pages in the document.","title":"1.4.1 len()"},{"location":"specs/splitter_spec/#142","text":"Synopsis document += page Usage The += (__iadd__) method is overridden to append a Page object to the document.","title":"1.4.2 +="},{"location":"specs/splitter_spec/#143","text":"Synopsis page= documents[n] document[n] = page Usage The [] (__getitem__) operator is overridden to return the Page object at the specified index. The __setitem__() method is overridden to replace the Page object at the specified index (i.e., page number \u2013 1). Exceptions A IndexError is raised if the index is out of range.","title":"1.4.3 []"},{"location":"specs/splitter_spec/#144-str","text":"Synopsis label = str(image) Usage The str() (__str__) operator is overridden to return the label of the document as a string.","title":"1.4.4 str()"},{"location":"specs/splitter_spec/#15-document-public-methods","text":"","title":"1.5 Document Public Methods"},{"location":"specs/splitter_spec/#151-load","text":"Synopsis document.load(name, dir=None) Parameters name: The name of the document. Usage This method will load into memory a preprocessed machine learning ready data from the corresponding JSON files specified by the document (root) name. The method will load the JSON files by the filename <name><pageno>.json . If dir is None , then it will look for the files where the current value for dir is defined (either locally or reset by the dir property). Otherwise, it will look for the files under the directory specified by the dir parameter. Once loaded, the Document object will have the same characteristics as when the Document object was created. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A ValueError is raised if the name parameter is None .","title":"1.5.1 load()"},{"location":"specs/splitter_spec/#16-document-private-methods","text":"The Document class contains the following private methods: _exists() \u2013 This method checks if the document exists at the specified stored path. If not, a FileNotFound exception is thrown. _collate() \u2013 This method performs the collation task, which includes: Determines the number of pages in the document. Splits the document into individual pages, where each page is individually stored in the same format as the document. The pages are named as follows: <name><pageno>.<suffix> Each page is stored in the subdirectory specified by the property dir. If dir is None, then the page is stored in the same directory where program is ran; otherwise, if the subdirectory does not exist, it is created. If the page is a scanned PDF page, the scanned image is extracted and saved as a PNG image. The PNG image is then OCR\u2019d to convert to text. <name><pageno>.png If the page is a TIFF facsimile, the TIFF image is then OCR\u2019d to convert to text. <name><pageno>.tif If the page is an image capture (e.g. camera capture), the captured image (e.g., JPG) is then OCR\u2019d to convert to text. <name><pageno>.jpg Extracts the raw text from the page , where each page is individually stored in a raw text format. The pages are named as follows: <name><pageno>.txt Each page is stored in the subdirectory specified by the property dir. If dir is None, then the page is stored in the same directory where program is ran. Create a Page object for each page and adds them to the pages index property. If the document format is raw text, then: Treats as a single page. Stores only a single page text file. If the document format is PDF, then page splitting and extraction of the raw text per page is done with the open source version of Ghostscript. If the document is a scanned PDF, the image is extracted and converted to PNG using Ghostscript and then OCR\u2019d using open source Tesseract. If the document format is TIFF, then page splitting is done with the open source Magick and then OCR\u2019d using open source Tesseract. _langcheck() \u2013 This method is called after NLP preprocessing of the document has been completed. The method will sample upto ten words to probabilistically determine the language of the document. The detected languages are English, French, German, Italian, and Spanish. _scancheck() \u2013 This method is called after NLP preprocessing of the document has been completed, and the document was a scanned image. The method will sample upto SCANCHECK number of words for recognition in the detected language dictionary (i.e., English, French, German, Italian, or Spanish). The method will check the words on either page 1 or page 2, depending on which page has a greater number of words. Punctuation, symbols, acronyms or single letter words are excluded. The method then sets the internal variable _quality to the percentage of the words that were recognized (between 0 and 1). _async() \u2013 This method performs asynchronous processing of the _collate() function, when the optional ehandler parameter to the constructor is not None . When processing is completed, the ehandler parameter value is called as a function to signal completion of the processing, and the document object is passed as a parameter.","title":"1.6 Document Private Methods"},{"location":"specs/splitter_spec/#2-page","text":"","title":"2 Page"},{"location":"specs/splitter_spec/#21-page-overview","text":"The page classifier contains the following primary classes, and their relationships: Page \u2013 This is a base class for the representation of an extracted page from a document. The constructor for the class object takes optionally as parameters the stored path to the page, and the extracted raw text. page = Page( \u2018/mypages/page1.pdf\u2019, \u2018some text\u2019) Words \u2013 This is a base class for representation of the text as NLP preprocessed list of words. Fig. 2a High Level view of Page Class Object Relationships","title":"2.1 Page Overview"},{"location":"specs/splitter_spec/#22-page-initializer-constructor","text":"Synopsis Page( page=None, text=None, pageno=None) Parameters page: If not None, the local path to the page. text: If not None, the text corresponding to the page. pageno: If not None, the page number in the corresponding Document object. Usage If the text parameter is not None, a Words object is created and instantiated with the corresponding text. The text is then NLP preprocessed according to the configuration settings stored as static members in the Page class (i.e., set by the parent Document object): BARE : If True, then the bare configuration setting is passed to the Words object. STEM : If not None, then the stem configuration setting is passed to the Words object. ROMAN : If True, then the roman configuration setting is passed to the Words object. POS : If True, then the pos configuration setting is passed to the Words object. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A FileNotFoundError is raised if the file specified by page parameter does not exist.","title":"2.2 Page Initializer (Constructor)"},{"location":"specs/splitter_spec/#23-page-properties","text":"","title":"2.3 Page Properties"},{"location":"specs/splitter_spec/#231-path","text":"Synopsis # Getter path = page.path # Setter page.path= path Usage When used as a getter the property returns the path of the corresponding page (i.e., split by Document object) in its native format. When used as a setter the property sets the path of the corresponding split page. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A FileNotFoundError is raised if the file specified by path does not exist.","title":"2.3.1 path"},{"location":"specs/splitter_spec/#232-pageno","text":"Synopsis # Getter pageno = page.pageno Usage When used as a getter the property returns the pageno set for the Page object in the corresponding parent Document object.","title":"2.3.2 pageno"},{"location":"specs/splitter_spec/#233-size","text":"Synopsis # Getter nbytes = page.size Usage When used as a getter the property returns the byte size of the text parameter.","title":"2.3.3 size"},{"location":"specs/splitter_spec/#234-label","text":"Synopsis # Getter label = page.label # Setter page.label = label Usage When used as a getter the property returns the integer label that has been assigned to the page. When used as a setter the property assigns sets a label to the page. Exceptions A TypeError is raised if the type of the parameter is not the expected type.","title":"2.3.4 label"},{"location":"specs/splitter_spec/#235-words","text":"Synopsis # Getter words = page.words Usage When used as a getter the property returns the Words object of the corresponding NLP preprocessed text.","title":"2.3.5 words"},{"location":"specs/splitter_spec/#236-bagofwords","text":"Synopsis # Getter bag = page.bagOfWords Usage When used as a getter the property returns the page\u2019s word sequences as a Bag of Words, represented as an unordered dictionary, where the key is the word and the value is the number of occurrences: { \u2018<word\u2019> : <no. of occurrences>, \u2026 }","title":"2.3.6 bagOfWords"},{"location":"specs/splitter_spec/#237-freqdist","text":"Synopsis # Getter freq = page.freqDist Usage When used as a getter the property returns the sorted tuples of a frequency distribution of words (from bag of words), in descending order (i.e., highest first) [ ( \u2018<word\u2019>: <no. of occurrences> ), \u2026. ]","title":"2.3.7 freqDist"},{"location":"specs/splitter_spec/#238-termfreq","text":"Synopsis # Getter tf = page.termFreq Usage When used as a getter the property returns the sorted tuples of a term frequency distribution (percent that term occurs), in descending order (i.e., highest first) [ ( \u2018<word\u2019>: <percentage of occurrences> ), \u2026. ]","title":"2.3.8 termFreq"},{"location":"specs/splitter_spec/#239-static-variables","text":"The Page class contains the following static variables: BARE : If True, then the bare configuration setting is passed to the Words object. STEM : If not None, then the stem configuration setting is passed to the Words object. ROMAN : If True, then the roman configuration setting is passed to the Words object. POS : If True, then the pos configuration setting is passed to the Words object.","title":"2.3.9 Static Variables"},{"location":"specs/splitter_spec/#24-page-overwritten-operators","text":"","title":"2.4 Page Overwritten Operators"},{"location":"specs/splitter_spec/#241-len","text":"Synopsis nwords = len(pages) Usage The len() (__len__) operator is overridden to return the number of NLP tokenized words in the page.","title":"2.4.1 len()"},{"location":"specs/splitter_spec/#242","text":"Synopsis page += text Usage The += (__iadd__) method is overridden to append text to the page, which is then NLP preprocessed. Exceptions A TypeError is raised if the type of the parameter is not the expected type.","title":"2.4.2 +="},{"location":"specs/splitter_spec/#243-str","text":"Synopsis label = str(image) Usage The str() (__str__) operator is overridden to return the label of the page as a string.","title":"2.4.3 str()"},{"location":"specs/splitter_spec/#25-page-private-methods","text":"The Page class contains no private methods.","title":"2.5 Page Private Methods"},{"location":"specs/splitter_spec/#26-page-public-methods","text":"","title":"2.6 Page Public Methods"},{"location":"specs/splitter_spec/#261-store","text":"Synopsis image.store(path) Parameters path: the file path to write to. Usage The store() method writes the NLP tokenized sequence as a JSON object to the specified file. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A FileNotFoundError is raised if the file path is invalid.","title":"2.6.1 store()"},{"location":"specs/splitter_spec/#262-load","text":"Synopsis image.load(path) Parameters path: the file path to read from. Usage The load() method writes the NLP tokenized sequence as a JSON object from the specified file. Exceptions A TypeError is raised if the type of the parameter is not the expected type. A FileNotFoundError is raised if the file path is invalid.","title":"2.6.2 load()"},{"location":"specs/splitter_spec/#appendix-i-updates","text":"Pre-Gap (Epipog) v1.1 1. Added time property. 2. Added scanned property. 3. Added support for TIFF and JPG/PNG. Pre-Gap (Epipog) v1.3 1. Add direct read of PDF resource element to determine if scanned page. 2. Fix not detecting scanned PDF if text extraction produced noise. Pre-Gap (Epipog) v1.4 1. Added pageno property to Page class. 2. Added methods store() and load() to Page class to store/load NLP tokenized words to file. 3. Added method load() to Document class to reload NLP tokenized words from storage. 4. Added config keyword arguent to Document initializer to configure NLP preprocessing. Pre-Gap (Epipog) v1.5 1. Added bagOfWords , freqDist , and termFreq properties to Document and Page class. Gap v0.9.1 (alpha) 1. Rewrote Specification. 2. Add OCR quality estimate. Gap v0.9.2 (alpha) 1. Add language detection for English, Spanish and French.","title":"APPENDIX I: Updates"},{"location":"specs/splitter_spec/#appendix-ii-anticipated-engineering","text":"The following has been identified as enhancement/issues to be addressed in subsequent update: What does it mean to add text to a document. Break raw text into pages for > 50 lines. Refactor page counting for faster performance. Add page split endpoint for streaming interface and URL. Add more pdf test files. Fix bug of not handling Cryllic characters in page load() method. Proprietary Information Copyright \u00a92018, Epipog, All Rights Reserved","title":"APPENDIX II: Anticipated Engineering"},{"location":"specs/syntax_spec/","text":"Gap Framework - Natural Language Processing for PDF/TIFF/Image Documents SYNTAX MODULE High Precision Natural Language Processing Technical Specification, Gap v0.9.2 1 Words 1.1 Words Overview The words NLP preprocessor contains the following primary classes, and their relationships: Words - This is the base class for the representation of a Natural Language Processing (NLP) preprocessed list of words. The constructor optionally takes as parameters the raw text to tokenize and flags for NLP preprocessing the text. words = Words(\"some text\", flags \u2026) The constructor calls the private methods _split() , _stem() , and _stopwords() . Word \u2013 A single NLP preprocessed word (token). Vocabulary \u2013 A performance optimized python dictionary for word classification and lemmatizing. Fig. 1a High Level view of Words Class Object Relationships 1.2 Words Initializer (Constructor) Synopsis Words( text, flags \u2026 ) Parameters text: A Unicode string of text. flags: Zero or more keyword parameters. bare: Tokenize only True - do not preprocess. punct: Keep/classify True or remove False punctuation. stopwords: Keep True all stop words or remove False . If True, it supersedes all other flags. If False, other flags may be used to include specific categories. The stop words are a superset of the Porter list. stem: Value indicating which stemmer to use: - builtin: gap - NLTK: porter, snowball, lancaster or the WordLemmatizer: lemma pos: Annotate True or not annotate False NLP preprocessed tokens with parts of speech using NLTK pos_tag() . spell: Spell check and replace misspelled words using norvig. The parameter may be set to one of en (English), es (Spanish) or fr (French). roman: Romanize True or not Romanize False latin-1 encodings of NLP preprocessed tokens into ASCII encoding. number: Keep/classify True or remove False numerical numbers. Ex. 1 / 4.5 / 1,000 / three unit: Keep/classify True or remove False units of measurement. Ex. inches / ft / cm height / width / weight / ht / wt temperature / \u00b0F / \u00b0C quantifier: Keep/classify True size specifying words or to remove False . Ex. all / any / more preposition: Keep/classify True preposition words or to remove False . Ex. to / from / above conjunction: Keep/classify True conjunction words or to remove False . Ex. and / or / but article: keep/classify True article words or to remove False . Ex. a / an / the demonstrative: Keep/classify True article words or to remove False . Ex. this / that / these question: Keep/classify True question words or to remove False . Ex. who / want / how pronoun: Keep/classify True pronoun words or to remove False . Ex. he / she / them date: Keep/classify/reduce True dates or to remove False . Ex. Jan. 1, 2000 / 01/01/2000 / 2000-01-01 dob: Keep/classify/reduce True date of births or to remove False . Ex. DOB: Jan 1, 2000 / date of birth is 01-02-2012 ssn: Keep/classify True social security numbers or to remove False . Ex. 123-84-1234 / 123 84 1234 telephone: Keep/classify True telephone numbers or to remove False . Ex. (360) 123-1234 / +13601231234 name: Keep/classify True telephone numbers or to remove False . Ex. Albert Einstein / Donald J. Trump address: Keep/classify/reduce street address or to remove False . Ex. 124 NE 34th Cir, Home Town, AZ, 99123 gender: Keep/classify True gender specifying words or remove False . Ex. male / man / gal / mom sentiment: Keep/classify/reduce True sentiment word sequences or remove False . Ex. not bad / disgusting Exceptions A TypeError is raised if the parameter is not the expected type. 1.3 Words Properties 1.3.1 text Synopsis # Getter text = images.text # Setter images.text = text Usage When used as a getter the property returns the original text. When used as a setter the property re-preprocesses the text into machine learning ready data. Exceptions A TypeError is raised if the parameter is not the expected type. 1.3.2 bare Synopsis # Getter tokens = images.bare Usage When used as a getter the property returns the NLP tokenized list unprocessed. All punctuation, words, capitalization and diacritic characters and script are preserved. The tokenized list is in a dictionary format of the form: [ { 'word': word1, 'tag': tag }, {'word': word2, 'tag': tag } \u2026 ] Except for numbers and acronyms, the tag values are set to untagged (0). 1.3.3 words Synopsis # Getter words = images.words Usage When used as a getter the property returns the NLP tokenized list according to the specified parameters. The tokenized list is in dictionary format of the form, when the parameter pos is False: [ { 'word': word1, 'tag': tag }, {'word': word2, 'tag': tag } \u2026 ] Otherwise, when the pos parameter is set to True: [ { 'word': word1, 'tag': tag, 'pos': POS }, {'word': word2, 'tag': tag, 'pos': POS } \u2026 ] 1.3.4 bagOfWords Synopsis # Getter bag = images.bagOfWords Usage When used as a getter the property returns the word sequence as a Bag of Words, represented as a unordered dictionary, where the key is the word and the value is the number of occurrences: { '<word'> : <no. of occurrences>, \u2026 } 1.3.5 freqDist Synopsis # Getter freq = images.freqDist Usage When used as a getter the property returns the sorted tuples of a frequency distribution of words (from bag of words), in descending order (i.e., highest first) [ ( '<word'>: <no. of occurrences> ), \u2026 ] 1.3.5 termFreq Synopsis # Getter tf = images.termFreq Usage When used as a getter the property returns the sorted tuples of a term frequency distribution (percent that term occurs), in descending order (i.e., highest first) [ ( '<word'>: <percentage of occurrences> ), \u2026 ] 1.3.6 Static Variables The Words class contains the following static variables: DECIMAL \u2013 The decimal point (US Standard: period , EU: comma) THOUSANDS \u2013 The thousandths unit separator (US Standard comma , EU period) 1.4 Words Overridden Operators 1.4.1 len() Synopsis nwords = len(words) Usage The len() (__len__) operator is overridden to return the number of NLP tokenized words. 1.4.2 += Synopsis words += text Usage The += (__iadd__) method is overridden to add words to the sequenced word list (append). 1.5 Words Private Methods The Words class contains the following private methods, which are called by the initializer: _split() \u2013 This method performs the first phase of NLP preprocessing of the raw text into a sequenced list of words (bare processing mode). Contractions are expanded (e.g., can't => can not). Newlines, carriage returns and tabs removed. Duplicated whitespace is removed. Text is split into words and punctuation. Punctuation is removed (except in numerical and date representations when property number and/or date and/or dob is True). _preprocess() - This method performs the second of NLP preprocessing of the 'bare' tokenized words. Identify acronyms. Identify proper names. Words are lowercased. Optionally words are Romanized, if roman attribute is set to True. _stem() \u2013 This method performs the third phase of NLP preprocessing of the tokenized words by removing word endings and reducing word to its root stem (e.g., rider -> ride). Remove plural endings (e.g., flies -> fly). Remove past tense endings (e.g., baked -> bake). Remove present participle endings (e.g., eating -> eat). Remove verb to noun and comparative endings (e.g., rider -> ride, taller-> tall). Remove noun to verb endings (e.g., flatten -> flat). Remove adjective to adverb endings (e.g, costly -> cost). Remove superlative endings (e.g., greatest -> great). Spell check/replacement (according to the specified language), if enabled, occurs prior to stemming. _nltkStem() \u2013 This method uses the open source NLTK stemmer methods to perform the third phase of NLP preprocessing of the tokenized words, as an alternative to the internal stemmer (i.e. stem)). The Porter, Snowball, Lancaster and WordNetLemmatizer are selectable. _stopwords() \u2013 This method performs the fourth phase of NLP preprocessing of the tokenized words by removing/keeping stop words. Remove word (including infinity) and numeric representations of numbers, unless property number is True, then all numbers are retained. If retained, EU decimal and thousandths unit separators converted to US standard. +/- signs preserved. Thousandths unit separator removed. Hex numbers (starting with 0x prefix) are converted to integer value. Text represented numbers (e.g., ten) are converted to integer value. Text represented numeric ordering (e.g., 1st) are converted to integer value. Fractions are converted to floating point value. Remove units of measurement, unless property unit is True. US Standard and Metric, including abbreviations, are recognized. US and EU spelling of metric units are recognized. Remove dates, unless property date is True. Remove date of birth, unless property dob is True. Remove USA social security numbers, unless property ssn is True, where the SSN number is converted to a 9 digit value. Remove USA/CA telephone numbers, unless property telephone is True, where the telephone number is converted to a 10 digit number. Remove USA/CA addresses, unless property address is True, where addresses are converted to the USPO addressing standard. Remove gender indicating words (e.g., man) \u2013 inclusive of transgender, unless property telephone is True. Remove proper names and titles (e.g., Dr.), unless property name is True. Remove quantifier indicating words (e.g., all, any), unless property quantifier is True. Remove prepositions (e.g., above, under), unless property preposition is True. Remove conjunctions (e.g., and, or), unless property conjunction is True. Remove articles (e.g., a, an), unless property article is True. Remove demonstratives (e.g., this, that), unless property demonstrative is True. Remove pronouns (e.g., his, her), unless property pronoun is True. Remove question words (e.g., what, why), unless property question is True. Remove common high frequency words i.e., Porter List). Remove sentiment sequence (e.g., good, bad), unless sentiment property is True. Sequence (e.g., not bad) replaced with \"positive\" or \"negative\". Remove punctuation and symbols, unless punct property is True. _isdate() \u2013 This method is a support method for _stopwords() . It will recognize date strings and convert them to ISO 8601 format. The following formats are recognized: MM/DD/YY and MM/DD/YYYY MM-DD-YY and MM-DD-YYYY YYYY-MM-DD (ISO 8601) Month Day, Year (e.g., January 6, 2016) Abbr-Month Day, Year (e.g., Jan 6, 2016 and Jan. 6, 2016) If the preceding word is birth or DOB, then the date will be tagged as a date of birth (vs. date). _isnumber() - This method is a support method for _stopwords() . It will recognize numerical sequences and convert them to decimal base 10 format. The following formats are recognized. Base 10 integer, floating point, exponent, fraction Base 16 hex integers _isSSN() - This method is a support method for _stopwords() . It will recognize USA Social Security numbers. The following formats are recognized: Prefixed with SSN or Soc. Sec. No. or Social Security Number Number Format: 12-123-1234 / 12 123 1234 / 121231234 _isTele() - This method is a support method for _stopwords() . It will recognize USA/CA Telephone numbers. The following formats are recognized: Prefixed with Tele, Phone, Mobile, Office, etc, optionally followed by Number, Num, No, #. Number Format: 1231231234 / 123 123 1234 / 123-123-123 / (360) 123-1234 / \u2026 _isAddr() \u2013 This method is a support method for _stopwords() . It will recognize USA/CA postal addresses. The following formats are recognized: [POB[,]] Street-Number [Street-Direction] Street-Name [Street-Type] [Street-Direction] [,] [POB[,]] [Secondary-Address[,]][City[,]State] POB[,] City State _streetnum() \u2013 This method supports the _isAddr() method in recognizing street numbers. The following formats are recognized: [(N|S|W|E)]digits[letter][-][digits|letter] Ex. N1300 / 123-33 / 33A / 33 _streetdir() \u2013 This method supports the _isAddr() method in recognizing directional phrases. The following formats are recognized: North|South[sp][West|East] N|S[.][w|e][.] _citystate() \u2013 This method supports the _isAddr() method in recognizing city/state references in a postal address. The following formats are recognized: City[,](Full-State|Abbr-State) # USA and Canadian state names are replaced with their ISO 3166-2 codes (e.g., Alabama => ISO3166-2:US-AL). _pob() \u2013 This method supports the _isAddr() method in recognizing USA and Canadian Post Office Boxes and Private Mail Boxes in street addresses. The following formats are recognized: ( P.O.B | POB | P.O. Box | P.O. | PO ) digits [ (STN | RPO) words ] ( P.M.B | PMB | P.M. Box ) digits _streetaddr2() \u2013 This method supports the _isAddr() method in recognizing secondary address components in street addresses. The following formats are recognized: (Apt|Ste|Rm|Fl|Bldg|Dept)[#](word[-][word) _postalcode() \u2013 This method supports the _isAddr method() in recognizing USA and Canadian postal codes. The following formats are recognized: 5digits[-4digits] # USA [3letters][sp][3letters] # Canada _isGender() \u2013 This method supports gender recognition in stopwords. It recognizes phrases: (Sex|Gender)[:] (M|F|Male|Female) _conversion() \u2013 This method performs the fifth phase of NLP preprocessing of the tokenized words of converting Standard to Metric (standard=True) and vice-versa (metric=True). _partsofspeech() \u2013 This method performs the sixth phase of NLP preprocessing of the tokenized words of tagging words with their parts of speech tag (using NLTK). 1.5 Words Public Methods The Words class contains no public methods. APPENDIX I: Updates Pre-Gap (Epipog) v1.1 + Refactored Stopword Removal for Parts of Speech, Numbers and Dates. + Added Vocabulary class and Lemmatizing. + Added support for Date of Birth. + Added support for recognizing word version of numbers. + Fixed handling of Hex numbers. Pre-Gap (Epipog) v1.2 + Added support for Social Security Numbers. + Added support for Telephone Numbers. + Added support for Proper Names. + Fix not recognizing Acronym if first word. + Refactored tokenization and added bare mode. Pre-Gap (Epipog) v1.3 + Added support for Spanish punctuation: \u00bf\u00a1 + Added support for numeric multipliers (e.g., 10 million). + Added support for unit of measurements. + Added conversion of unit of measurements between Standard and Metric. + Added support for Sex/Gender[:] M/F. + Added support for USA street addresses. + Fix not recognizing single letter abbreviations. + Fixed not recognizing title (name) proceeded by a comma. + Fixed not recognizing number followed by unit of measurement when combined (e.g., 2cm). Pre-Gap (Epipog) v1.4 + Added NLTK options for stemming, lemmatization and parts of speech. + Change outputting of US State names to ISO 3166-2 standard. + Added support for PMB in postal address. + Added is/of separator between key and value (e.g., SSN is XXX-XX-XXXX). + Added support for Canadian Street/Postal addresses. + Added support for Romanizing latin-1 character encodings into ASCII. + Added support for measurements. Pre-Gap (Epipog) v1.5 + Added Bag of Words, Word Frequency Distribution and Term Frequency (TF) Gap v0.9.1 (alpha) + Rewrote Specification. + Added spell check/replacement. + Added UK to US spelling correction. Gap v0.9.2 (alpha) + Extend Spell Checking to Spanish and French. APPENDIX II: Anticipated Engineering The following has been identified as enhancement/issues to be addressed in subsequent update: Support for detecting Abbreviations. Support for email addresses. Add support for mail stop Secondary Street Address components. Add support for Currency. Add and annotation. Fix lose next word after street/postal address. Proprietary Information Copyright \u00a92018, Epipog, All Rights Reserved","title":"Syntax"},{"location":"specs/syntax_spec/#gap-framework-natural-language-processing-for-pdftiffimage-documents","text":"","title":"Gap Framework - Natural Language Processing for PDF/TIFF/Image Documents"},{"location":"specs/syntax_spec/#syntax-module","text":"High Precision Natural Language Processing Technical Specification, Gap v0.9.2","title":"SYNTAX MODULE"},{"location":"specs/syntax_spec/#1-words","text":"","title":"1 Words"},{"location":"specs/syntax_spec/#11-words-overview","text":"The words NLP preprocessor contains the following primary classes, and their relationships: Words - This is the base class for the representation of a Natural Language Processing (NLP) preprocessed list of words. The constructor optionally takes as parameters the raw text to tokenize and flags for NLP preprocessing the text. words = Words(\"some text\", flags \u2026) The constructor calls the private methods _split() , _stem() , and _stopwords() . Word \u2013 A single NLP preprocessed word (token). Vocabulary \u2013 A performance optimized python dictionary for word classification and lemmatizing. Fig. 1a High Level view of Words Class Object Relationships","title":"1.1 Words Overview"},{"location":"specs/syntax_spec/#12-words-initializer-constructor","text":"Synopsis Words( text, flags \u2026 ) Parameters text: A Unicode string of text. flags: Zero or more keyword parameters. bare: Tokenize only True - do not preprocess. punct: Keep/classify True or remove False punctuation. stopwords: Keep True all stop words or remove False . If True, it supersedes all other flags. If False, other flags may be used to include specific categories. The stop words are a superset of the Porter list. stem: Value indicating which stemmer to use: - builtin: gap - NLTK: porter, snowball, lancaster or the WordLemmatizer: lemma pos: Annotate True or not annotate False NLP preprocessed tokens with parts of speech using NLTK pos_tag() . spell: Spell check and replace misspelled words using norvig. The parameter may be set to one of en (English), es (Spanish) or fr (French). roman: Romanize True or not Romanize False latin-1 encodings of NLP preprocessed tokens into ASCII encoding. number: Keep/classify True or remove False numerical numbers. Ex. 1 / 4.5 / 1,000 / three unit: Keep/classify True or remove False units of measurement. Ex. inches / ft / cm height / width / weight / ht / wt temperature / \u00b0F / \u00b0C quantifier: Keep/classify True size specifying words or to remove False . Ex. all / any / more preposition: Keep/classify True preposition words or to remove False . Ex. to / from / above conjunction: Keep/classify True conjunction words or to remove False . Ex. and / or / but article: keep/classify True article words or to remove False . Ex. a / an / the demonstrative: Keep/classify True article words or to remove False . Ex. this / that / these question: Keep/classify True question words or to remove False . Ex. who / want / how pronoun: Keep/classify True pronoun words or to remove False . Ex. he / she / them date: Keep/classify/reduce True dates or to remove False . Ex. Jan. 1, 2000 / 01/01/2000 / 2000-01-01 dob: Keep/classify/reduce True date of births or to remove False . Ex. DOB: Jan 1, 2000 / date of birth is 01-02-2012 ssn: Keep/classify True social security numbers or to remove False . Ex. 123-84-1234 / 123 84 1234 telephone: Keep/classify True telephone numbers or to remove False . Ex. (360) 123-1234 / +13601231234 name: Keep/classify True telephone numbers or to remove False . Ex. Albert Einstein / Donald J. Trump address: Keep/classify/reduce street address or to remove False . Ex. 124 NE 34th Cir, Home Town, AZ, 99123 gender: Keep/classify True gender specifying words or remove False . Ex. male / man / gal / mom sentiment: Keep/classify/reduce True sentiment word sequences or remove False . Ex. not bad / disgusting Exceptions A TypeError is raised if the parameter is not the expected type.","title":"1.2 Words Initializer (Constructor)"},{"location":"specs/syntax_spec/#13-words-properties","text":"","title":"1.3 Words Properties"},{"location":"specs/syntax_spec/#131-text","text":"Synopsis # Getter text = images.text # Setter images.text = text Usage When used as a getter the property returns the original text. When used as a setter the property re-preprocesses the text into machine learning ready data. Exceptions A TypeError is raised if the parameter is not the expected type.","title":"1.3.1 text"},{"location":"specs/syntax_spec/#132-bare","text":"Synopsis # Getter tokens = images.bare Usage When used as a getter the property returns the NLP tokenized list unprocessed. All punctuation, words, capitalization and diacritic characters and script are preserved. The tokenized list is in a dictionary format of the form: [ { 'word': word1, 'tag': tag }, {'word': word2, 'tag': tag } \u2026 ] Except for numbers and acronyms, the tag values are set to untagged (0).","title":"1.3.2 bare"},{"location":"specs/syntax_spec/#133-words","text":"Synopsis # Getter words = images.words Usage When used as a getter the property returns the NLP tokenized list according to the specified parameters. The tokenized list is in dictionary format of the form, when the parameter pos is False: [ { 'word': word1, 'tag': tag }, {'word': word2, 'tag': tag } \u2026 ] Otherwise, when the pos parameter is set to True: [ { 'word': word1, 'tag': tag, 'pos': POS }, {'word': word2, 'tag': tag, 'pos': POS } \u2026 ]","title":"1.3.3 words"},{"location":"specs/syntax_spec/#134-bagofwords","text":"Synopsis # Getter bag = images.bagOfWords Usage When used as a getter the property returns the word sequence as a Bag of Words, represented as a unordered dictionary, where the key is the word and the value is the number of occurrences: { '<word'> : <no. of occurrences>, \u2026 }","title":"1.3.4 bagOfWords"},{"location":"specs/syntax_spec/#135-freqdist","text":"Synopsis # Getter freq = images.freqDist Usage When used as a getter the property returns the sorted tuples of a frequency distribution of words (from bag of words), in descending order (i.e., highest first) [ ( '<word'>: <no. of occurrences> ), \u2026 ]","title":"1.3.5 freqDist"},{"location":"specs/syntax_spec/#135-termfreq","text":"Synopsis # Getter tf = images.termFreq Usage When used as a getter the property returns the sorted tuples of a term frequency distribution (percent that term occurs), in descending order (i.e., highest first) [ ( '<word'>: <percentage of occurrences> ), \u2026 ]","title":"1.3.5 termFreq"},{"location":"specs/syntax_spec/#136-static-variables","text":"The Words class contains the following static variables: DECIMAL \u2013 The decimal point (US Standard: period , EU: comma) THOUSANDS \u2013 The thousandths unit separator (US Standard comma , EU period)","title":"1.3.6 Static Variables"},{"location":"specs/syntax_spec/#14-words-overridden-operators","text":"","title":"1.4  Words Overridden Operators"},{"location":"specs/syntax_spec/#141-len","text":"Synopsis nwords = len(words) Usage The len() (__len__) operator is overridden to return the number of NLP tokenized words.","title":"1.4.1  len()"},{"location":"specs/syntax_spec/#142","text":"Synopsis words += text Usage The += (__iadd__) method is overridden to add words to the sequenced word list (append).","title":"1.4.2  +="},{"location":"specs/syntax_spec/#15-words-private-methods","text":"The Words class contains the following private methods, which are called by the initializer: _split() \u2013 This method performs the first phase of NLP preprocessing of the raw text into a sequenced list of words (bare processing mode). Contractions are expanded (e.g., can't => can not). Newlines, carriage returns and tabs removed. Duplicated whitespace is removed. Text is split into words and punctuation. Punctuation is removed (except in numerical and date representations when property number and/or date and/or dob is True). _preprocess() - This method performs the second of NLP preprocessing of the 'bare' tokenized words. Identify acronyms. Identify proper names. Words are lowercased. Optionally words are Romanized, if roman attribute is set to True. _stem() \u2013 This method performs the third phase of NLP preprocessing of the tokenized words by removing word endings and reducing word to its root stem (e.g., rider -> ride). Remove plural endings (e.g., flies -> fly). Remove past tense endings (e.g., baked -> bake). Remove present participle endings (e.g., eating -> eat). Remove verb to noun and comparative endings (e.g., rider -> ride, taller-> tall). Remove noun to verb endings (e.g., flatten -> flat). Remove adjective to adverb endings (e.g, costly -> cost). Remove superlative endings (e.g., greatest -> great). Spell check/replacement (according to the specified language), if enabled, occurs prior to stemming. _nltkStem() \u2013 This method uses the open source NLTK stemmer methods to perform the third phase of NLP preprocessing of the tokenized words, as an alternative to the internal stemmer (i.e. stem)). The Porter, Snowball, Lancaster and WordNetLemmatizer are selectable. _stopwords() \u2013 This method performs the fourth phase of NLP preprocessing of the tokenized words by removing/keeping stop words. Remove word (including infinity) and numeric representations of numbers, unless property number is True, then all numbers are retained. If retained, EU decimal and thousandths unit separators converted to US standard. +/- signs preserved. Thousandths unit separator removed. Hex numbers (starting with 0x prefix) are converted to integer value. Text represented numbers (e.g., ten) are converted to integer value. Text represented numeric ordering (e.g., 1st) are converted to integer value. Fractions are converted to floating point value. Remove units of measurement, unless property unit is True. US Standard and Metric, including abbreviations, are recognized. US and EU spelling of metric units are recognized. Remove dates, unless property date is True. Remove date of birth, unless property dob is True. Remove USA social security numbers, unless property ssn is True, where the SSN number is converted to a 9 digit value. Remove USA/CA telephone numbers, unless property telephone is True, where the telephone number is converted to a 10 digit number. Remove USA/CA addresses, unless property address is True, where addresses are converted to the USPO addressing standard. Remove gender indicating words (e.g., man) \u2013 inclusive of transgender, unless property telephone is True. Remove proper names and titles (e.g., Dr.), unless property name is True. Remove quantifier indicating words (e.g., all, any), unless property quantifier is True. Remove prepositions (e.g., above, under), unless property preposition is True. Remove conjunctions (e.g., and, or), unless property conjunction is True. Remove articles (e.g., a, an), unless property article is True. Remove demonstratives (e.g., this, that), unless property demonstrative is True. Remove pronouns (e.g., his, her), unless property pronoun is True. Remove question words (e.g., what, why), unless property question is True. Remove common high frequency words i.e., Porter List). Remove sentiment sequence (e.g., good, bad), unless sentiment property is True. Sequence (e.g., not bad) replaced with \"positive\" or \"negative\". Remove punctuation and symbols, unless punct property is True. _isdate() \u2013 This method is a support method for _stopwords() . It will recognize date strings and convert them to ISO 8601 format. The following formats are recognized: MM/DD/YY and MM/DD/YYYY MM-DD-YY and MM-DD-YYYY YYYY-MM-DD (ISO 8601) Month Day, Year (e.g., January 6, 2016) Abbr-Month Day, Year (e.g., Jan 6, 2016 and Jan. 6, 2016) If the preceding word is birth or DOB, then the date will be tagged as a date of birth (vs. date). _isnumber() - This method is a support method for _stopwords() . It will recognize numerical sequences and convert them to decimal base 10 format. The following formats are recognized. Base 10 integer, floating point, exponent, fraction Base 16 hex integers _isSSN() - This method is a support method for _stopwords() . It will recognize USA Social Security numbers. The following formats are recognized: Prefixed with SSN or Soc. Sec. No. or Social Security Number Number Format: 12-123-1234 / 12 123 1234 / 121231234 _isTele() - This method is a support method for _stopwords() . It will recognize USA/CA Telephone numbers. The following formats are recognized: Prefixed with Tele, Phone, Mobile, Office, etc, optionally followed by Number, Num, No, #. Number Format: 1231231234 / 123 123 1234 / 123-123-123 / (360) 123-1234 / \u2026 _isAddr() \u2013 This method is a support method for _stopwords() . It will recognize USA/CA postal addresses. The following formats are recognized: [POB[,]] Street-Number [Street-Direction] Street-Name [Street-Type] [Street-Direction] [,] [POB[,]] [Secondary-Address[,]][City[,]State] POB[,] City State _streetnum() \u2013 This method supports the _isAddr() method in recognizing street numbers. The following formats are recognized: [(N|S|W|E)]digits[letter][-][digits|letter] Ex. N1300 / 123-33 / 33A / 33 _streetdir() \u2013 This method supports the _isAddr() method in recognizing directional phrases. The following formats are recognized: North|South[sp][West|East] N|S[.][w|e][.] _citystate() \u2013 This method supports the _isAddr() method in recognizing city/state references in a postal address. The following formats are recognized: City[,](Full-State|Abbr-State) # USA and Canadian state names are replaced with their ISO 3166-2 codes (e.g., Alabama => ISO3166-2:US-AL). _pob() \u2013 This method supports the _isAddr() method in recognizing USA and Canadian Post Office Boxes and Private Mail Boxes in street addresses. The following formats are recognized: ( P.O.B | POB | P.O. Box | P.O. | PO ) digits [ (STN | RPO) words ] ( P.M.B | PMB | P.M. Box ) digits _streetaddr2() \u2013 This method supports the _isAddr() method in recognizing secondary address components in street addresses. The following formats are recognized: (Apt|Ste|Rm|Fl|Bldg|Dept)[#](word[-][word) _postalcode() \u2013 This method supports the _isAddr method() in recognizing USA and Canadian postal codes. The following formats are recognized: 5digits[-4digits] # USA [3letters][sp][3letters] # Canada _isGender() \u2013 This method supports gender recognition in stopwords. It recognizes phrases: (Sex|Gender)[:] (M|F|Male|Female) _conversion() \u2013 This method performs the fifth phase of NLP preprocessing of the tokenized words of converting Standard to Metric (standard=True) and vice-versa (metric=True). _partsofspeech() \u2013 This method performs the sixth phase of NLP preprocessing of the tokenized words of tagging words with their parts of speech tag (using NLTK).","title":"1.5 Words Private Methods"},{"location":"specs/syntax_spec/#15-words-public-methods","text":"The Words class contains no public methods.","title":"1.5 Words Public Methods"},{"location":"specs/syntax_spec/#appendix-i-updates","text":"Pre-Gap (Epipog) v1.1 + Refactored Stopword Removal for Parts of Speech, Numbers and Dates. + Added Vocabulary class and Lemmatizing. + Added support for Date of Birth. + Added support for recognizing word version of numbers. + Fixed handling of Hex numbers. Pre-Gap (Epipog) v1.2 + Added support for Social Security Numbers. + Added support for Telephone Numbers. + Added support for Proper Names. + Fix not recognizing Acronym if first word. + Refactored tokenization and added bare mode. Pre-Gap (Epipog) v1.3 + Added support for Spanish punctuation: \u00bf\u00a1 + Added support for numeric multipliers (e.g., 10 million). + Added support for unit of measurements. + Added conversion of unit of measurements between Standard and Metric. + Added support for Sex/Gender[:] M/F. + Added support for USA street addresses. + Fix not recognizing single letter abbreviations. + Fixed not recognizing title (name) proceeded by a comma. + Fixed not recognizing number followed by unit of measurement when combined (e.g., 2cm). Pre-Gap (Epipog) v1.4 + Added NLTK options for stemming, lemmatization and parts of speech. + Change outputting of US State names to ISO 3166-2 standard. + Added support for PMB in postal address. + Added is/of separator between key and value (e.g., SSN is XXX-XX-XXXX). + Added support for Canadian Street/Postal addresses. + Added support for Romanizing latin-1 character encodings into ASCII. + Added support for measurements. Pre-Gap (Epipog) v1.5 + Added Bag of Words, Word Frequency Distribution and Term Frequency (TF) Gap v0.9.1 (alpha) + Rewrote Specification. + Added spell check/replacement. + Added UK to US spelling correction. Gap v0.9.2 (alpha) + Extend Spell Checking to Spanish and French.","title":"APPENDIX I: Updates"},{"location":"specs/syntax_spec/#appendix-ii-anticipated-engineering","text":"The following has been identified as enhancement/issues to be addressed in subsequent update: Support for detecting Abbreviations. Support for email addresses. Add support for mail stop Secondary Street Address components. Add support for Currency. Add and annotation. Fix lose next word after street/postal address. Proprietary Information Copyright \u00a92018, Epipog, All Rights Reserved","title":"APPENDIX II: Anticipated Engineering"},{"location":"tutorials/natural_language_processing/","text":"Natural Language Processing Introduction Welcome to the labs.earth collaborative laboratory tutorials on machine learning. The natural language processing (NLP) tutorials will start with the basics and progress to advanced real world applications. The tutorials go beyond explaining the code and steps, to include the answers to the anticipated what and why questions. Before the advent of machine learning with computer vision and today's modern ML/CV frameworks, working with and building real world applications was once the exclusive domain of imaging scientists. The Gap framework extends modern natural language processing to software developers, whom are familar with object oriented programming (OOP), object relational models (ORM), design patterns (e.g., MVC), asynchronous programming (AJAX), and microservice architectures. For the data analyst and statisticians whom feel they don't have the necessary software development background, we encourage you to visit the collaborative lab's training site for fundamentials in modern software programming. Likewise, for those software developers whom feel they don't have the necessary background in statistics and machine learning, we encourage you to visit the collaborative lab's training site for fundamentials in modern statistics and machine learning . As far as our team and contributers, they keep a single phrase in mind when designing, coding and building tutorials. They like to say that Gap is: Machine Learning for Humans The First Steps in using Gap for Natural Language Processing (NLP)","title":"Natural Language Processing"},{"location":"tutorials/natural_language_processing/#natural-language-processing","text":"","title":"Natural Language Processing"},{"location":"tutorials/natural_language_processing/#introduction","text":"Welcome to the labs.earth collaborative laboratory tutorials on machine learning. The natural language processing (NLP) tutorials will start with the basics and progress to advanced real world applications. The tutorials go beyond explaining the code and steps, to include the answers to the anticipated what and why questions. Before the advent of machine learning with computer vision and today's modern ML/CV frameworks, working with and building real world applications was once the exclusive domain of imaging scientists. The Gap framework extends modern natural language processing to software developers, whom are familar with object oriented programming (OOP), object relational models (ORM), design patterns (e.g., MVC), asynchronous programming (AJAX), and microservice architectures. For the data analyst and statisticians whom feel they don't have the necessary software development background, we encourage you to visit the collaborative lab's training site for fundamentials in modern software programming. Likewise, for those software developers whom feel they don't have the necessary background in statistics and machine learning, we encourage you to visit the collaborative lab's training site for fundamentials in modern statistics and machine learning . As far as our team and contributers, they keep a single phrase in mind when designing, coding and building tutorials. They like to say that Gap is: Machine Learning for Humans","title":"Introduction"},{"location":"tutorials/natural_language_processing/#the-first-steps-in-using-gap-for-natural-language-processing-nlp","text":"","title":"The First Steps in using Gap for Natural Language Processing (NLP)"}]}